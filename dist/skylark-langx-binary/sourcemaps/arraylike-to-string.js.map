{"version":3,"sources":["arraylike-to-string.js"],"names":["define","binary","getTypeOf","arrayToStringHelper","stringifyByChunk","array","type","chunk","result","k","len","length","String","fromCharCode","apply","push","slice","Math","min","subarray","join","stringifyByChar","resultStr","i","applyCanBeUsed","uint8array","support","Uint8Array","e","nodebuffer","Buffer","alloc","arrayLikeToString","canUseApply","floor"],"mappings":";;;;;;;AAAAA,QACE,WACA,iBACA,SAASC,EAAOC,GAEd,IAAIC,GACAC,iBAAkB,SAAUC,EAAOC,EAAMC,GACrC,IAAIC,KAAaC,EAAI,EAAGC,EAAML,EAAMM,OACpC,GAAID,GAAOH,EACP,OAAOK,OAAOC,aAAaC,MAAM,KAAMT,GAE3C,KAAOI,EAAIC,GACM,UAATJ,GAA6B,eAATA,EACpBE,EAAOO,KAAKH,OAAOC,aAAaC,MAAM,KAAMT,EAAMW,MAAMP,EAAGQ,KAAKC,IAAIT,EAAIF,EAAOG,MAE/EF,EAAOO,KAAKH,OAAOC,aAAaC,MAAM,KAAMT,EAAMc,SAASV,EAAGQ,KAAKC,IAAIT,EAAIF,EAAOG,MAEtFD,GAAKF,EAET,OAAOC,EAAOY,KAAK,KAEvBC,gBAAiB,SAAUhB,GAEvB,IADA,IAAIiB,EAAY,GACPC,EAAI,EAAGA,EAAIlB,EAAMM,OAAQY,IAC9BD,GAAaV,OAAOC,aAAaR,EAAMkB,IAE3C,OAAOD,GAEXE,gBACIC,WAAY,WACR,IACI,OAAOC,QAAQD,YAA4E,IAA9Db,OAAOC,aAAaC,MAAM,KAAM,IAAIa,WAAW,IAAIhB,OAClF,MAAOiB,GACL,OAAO,GAJH,GAOZC,WAAY,WACR,IAEI,OAAOH,QAAQG,YAA0E,IAA5DjB,OAAOC,aAAaC,MAAM,KAAMgB,OAAOC,MAAM,IAAIpB,OAChF,MAAOiB,GACL,OAAO,GALH,KA6BpB,OAAO3B,EAAO+B,kBAnBd,SAA2B3B,GACvB,IAAIE,EAAQ,MAAOD,EAAOJ,EAAUG,GAAQ4B,GAAc,EAM1D,GALa,eAAT3B,EACA2B,EAAc9B,EAAoBqB,eAAeC,WACjC,WAATnB,IACP2B,EAAc9B,EAAoBqB,eAAeK,YAEjDI,EACA,KAAO1B,EAAQ,GACX,IACI,OAAOJ,EAAoBC,iBAAiBC,EAAOC,EAAMC,GAC3D,MAAOqB,GACLrB,EAAQU,KAAKiB,MAAM3B,EAAQ,GAIvC,OAAOJ,EAAoBkB,gBAAgBhB","file":"../arraylike-to-string.js","sourcesContent":["define([\r\n  \"./binary\",\r\n  \"./get-type-of\"\r\n],function(binary,getTypeOf){\r\n\r\n    var arrayToStringHelper = {\r\n        stringifyByChunk: function (array, type, chunk) {\r\n            var result = [], k = 0, len = array.length;\r\n            if (len <= chunk) {\r\n                return String.fromCharCode.apply(null, array);\r\n            }\r\n            while (k < len) {\r\n                if (type === 'array' || type === 'nodebuffer') {\r\n                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\r\n                } else {\r\n                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\r\n                }\r\n                k += chunk;\r\n            }\r\n            return result.join('');\r\n        },\r\n        stringifyByChar: function (array) {\r\n            var resultStr = '';\r\n            for (var i = 0; i < array.length; i++) {\r\n                resultStr += String.fromCharCode(array[i]);\r\n            }\r\n            return resultStr;\r\n        },\r\n        applyCanBeUsed: {\r\n            uint8array: function () {\r\n                try {\r\n                    return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            }(),\r\n            nodebuffer: function () {\r\n                try {\r\n                ///    return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.allocBuffer(1)).length === 1;\r\n                    return support.nodebuffer && String.fromCharCode.apply(null, Buffer.alloc(1)).length === 1;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            }()\r\n        }\r\n    };\r\n    function arrayLikeToString(array) {\r\n        var chunk = 65536, type = getTypeOf(array), canUseApply = true;\r\n        if (type === 'uint8array') {\r\n            canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;\r\n        } else if (type === 'memory') {\r\n            canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;\r\n        }\r\n        if (canUseApply) {\r\n            while (chunk > 1) {\r\n                try {\r\n                    return arrayToStringHelper.stringifyByChunk(array, type, chunk);\r\n                } catch (e) {\r\n                    chunk = Math.floor(chunk / 2);\r\n                }\r\n            }\r\n        }\r\n        return arrayToStringHelper.stringifyByChar(array);\r\n    }\r\n\r\n    return binary.arrayLikeToString = arrayLikeToString;\r\n});\r\n"]}