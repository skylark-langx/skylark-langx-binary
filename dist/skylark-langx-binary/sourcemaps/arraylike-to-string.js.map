{"version":3,"sources":["arraylike-to-string.js"],"names":["define","binary","getTypeOf","arrayToStringHelper","stringifyByChunk","array","type","chunk","result","k","len","length","String","fromCharCode","apply","push","slice","Math","min","subarray","join","stringifyByChar","resultStr","i","applyCanBeUsed","uint8array","Uint8Array","e","nodebuffer","Buffer","alloc","arrayLikeToString","canUseApply","floor"],"mappings":";;;;;;;AAAAA,OAAO,CACL,WACA,iBACA,SAASC,EAAOC,GAEd,IAAIC,EAAsB,CACtBC,iBAAkB,SAAUC,EAAOC,EAAMC,GACrC,IAAIC,EAAS,GAAIC,EAAI,EAAGC,EAAML,EAAMM,OACpC,GAAID,GAAOH,EACP,OAAOK,OAAOC,aAAaC,MAAM,KAAMT,CAAK,EAEhD,KAAOI,EAAIC,GAEHF,EAAOO,KADE,UAATT,GAA6B,eAATA,EACRM,OAAOC,aAAaC,MAAM,KAAMT,EAAMW,MAAMP,EAAGQ,KAAKC,IAAIT,EAAIF,EAAOG,CAAG,CAAC,CAAC,EAExEE,OAAOC,aAAaC,MAAM,KAAMT,EAAMc,SAASV,EAAGQ,KAAKC,IAAIT,EAAIF,EAAOG,CAAG,CAAC,CAAC,CAFF,EAIzFD,GAAKF,EAET,OAAOC,EAAOY,KAAK,EAAE,CACzB,EACAC,gBAAiB,SAAUhB,GAEvB,IADA,IAAIiB,EAAY,GACPC,EAAI,EAAGA,EAAIlB,EAAMM,OAAQY,CAAC,GAC/BD,GAAaV,OAAOC,aAAaR,EAAMkB,EAAE,EAE7C,OAAOD,CACX,EACAE,eAAgB,CACZC,WAAY,WACR,IACI,OAAsE,IAA9Db,OAAOC,aAAaC,MAAM,KAAM,IAAIY,WAAW,CAAC,CAAC,EAAEf,MAG/D,CAFE,MAAOgB,GACL,MAAO,CAAA,CACX,CACJ,EAAE,EACFC,WAAY,WACR,IAEI,OAAoE,IAA5DhB,OAAOC,aAAaC,MAAM,KAAMe,OAAOC,MAAM,CAAC,CAAC,EAAEnB,MAG7D,CAFE,MAAOgB,GACL,MAAO,CAAA,CACX,CACJ,EAAE,CACN,CACJ,EAoBA,OAAO1B,EAAO8B,kBAnBd,SAA2B1B,GACvB,IAAIE,EAAQ,MAAOD,EAAOJ,EAAUG,CAAK,EAAG2B,EAAc,CAAA,EAM1D,GALa,eAAT1B,EACA0B,EAAc7B,EAAoBqB,eAAeC,WACjC,WAATnB,IACP0B,EAAc7B,EAAoBqB,eAAeI,YAEjDI,EACA,KAAe,EAARzB,GACH,IACI,OAAOJ,EAAoBC,iBAAiBC,EAAOC,EAAMC,CAAK,CAGlE,CAFE,MAAOoB,GACLpB,EAAQU,KAAKgB,MAAM1B,EAAQ,CAAC,CAChC,CAGR,OAAOJ,EAAoBkB,gBAAgBhB,CAAK,CACpD,CAGJ,CAAC","file":"../arraylike-to-string.js","sourcesContent":["define([\r\n  \"./binary\",\r\n  \"./get-type-of\"\r\n],function(binary,getTypeOf){\r\n\r\n    var arrayToStringHelper = {\r\n        stringifyByChunk: function (array, type, chunk) {\r\n            var result = [], k = 0, len = array.length;\r\n            if (len <= chunk) {\r\n                return String.fromCharCode.apply(null, array);\r\n            }\r\n            while (k < len) {\r\n                if (type === 'array' || type === 'nodebuffer') {\r\n                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\r\n                } else {\r\n                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\r\n                }\r\n                k += chunk;\r\n            }\r\n            return result.join('');\r\n        },\r\n        stringifyByChar: function (array) {\r\n            var resultStr = '';\r\n            for (var i = 0; i < array.length; i++) {\r\n                resultStr += String.fromCharCode(array[i]);\r\n            }\r\n            return resultStr;\r\n        },\r\n        applyCanBeUsed: {\r\n            uint8array: function () {\r\n                try {\r\n                    return  String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            }(),\r\n            nodebuffer: function () {\r\n                try {\r\n                ///    return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.allocBuffer(1)).length === 1;\r\n                    return  String.fromCharCode.apply(null, Buffer.alloc(1)).length === 1;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            }()\r\n        }\r\n    };\r\n    function arrayLikeToString(array) {\r\n        var chunk = 65536, type = getTypeOf(array), canUseApply = true;\r\n        if (type === 'uint8array') {\r\n            canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;\r\n        } else if (type === 'memory') {\r\n            canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;\r\n        }\r\n        if (canUseApply) {\r\n            while (chunk > 1) {\r\n                try {\r\n                    return arrayToStringHelper.stringifyByChunk(array, type, chunk);\r\n                } catch (e) {\r\n                    chunk = Math.floor(chunk / 2);\r\n                }\r\n            }\r\n        }\r\n        return arrayToStringHelper.stringifyByChar(array);\r\n    }\r\n\r\n    return binary.arrayLikeToString = arrayLikeToString;\r\n});\r\n"]}