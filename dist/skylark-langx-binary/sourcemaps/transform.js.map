{"version":3,"sources":["transform.js"],"names":["define","binary","Memory","getTypeOf","stringToArrayLike","arrayLikeToString","identity","input","arrayLikeToArrayLike","arrayFrom","arrayTo","i","length","transform","outputType","inputType","string","array","Array","arraybuffer","buffer","uint8array","Uint8Array","memory","Buffer","alloc","from","byteLength"],"mappings":";;;;;;;AAAAA,QACI,WACA,WACA,gBACA,wBACA,yBACF,SAASC,EAAOC,EAAOC,EAAUC,EAAkBC,GAEjD,SAASC,EAASC,GACd,OAAOA,EAGX,SAASC,EAAqBC,EAAWC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAClCD,EAAQC,GAAKF,EAAUE,GAE3B,OAAOD,EAGX,IAAIG,EAAa,SAAUC,EAAYP,GAInC,GAHKA,IACDA,EAAQ,KAEPO,EACD,OAAOP,EAEX,IAAIQ,EAAYZ,EAAUI,GAE1B,OADaM,EAAUE,GAAWD,GAAYP,IA6ElD,OA1EAM,EAAkB,QACdG,OAAUV,EACVW,MAAS,SAAUV,GACf,OAAOH,EAAkBG,EAAO,IAAIW,MAAMX,EAAMK,UAEpDO,YAAe,SAAUZ,GACrB,OAAOM,EAAkB,OAAc,WAAEN,GAAOa,QAEpDC,WAAc,SAAUd,GACpB,OAAOH,EAAkBG,EAAO,IAAIe,WAAWf,EAAMK,UAEzDW,OAAU,SAAUhB,GAEhB,OAAOH,EAAkBG,EAAOiB,OAAOC,MAAMlB,EAAMK,WAG3DC,EAAiB,OACbG,OAAUX,EACVY,MAASX,EACTa,YAAe,SAAUZ,GACrB,OAAO,IAAIe,WAAWf,GAAOa,QAEjCC,WAAc,SAAUd,GACpB,OAAO,IAAIe,WAAWf,IAE1BgB,OAAU,SAAUhB,GAEhB,OAAOL,EAAOwB,KAAKnB,KAG3BM,EAAuB,aACnBG,OAAU,SAAUT,GAChB,OAAOF,EAAkB,IAAIiB,WAAWf,KAE5CU,MAAS,SAAUV,GACf,OAAOC,EAAqB,IAAIc,WAAWf,GAAQ,IAAIW,MAAMX,EAAMoB,cAEvER,YAAeb,EACfe,WAAc,SAAUd,GACpB,OAAO,IAAIe,WAAWf,IAE1BgB,OAAU,SAAUhB,GAEhB,OAAOL,EAAOwB,KAAK,IAAIJ,WAAWf,MAG1CM,EAAsB,YAClBG,OAAUX,EACVY,MAAS,SAAUV,GACf,OAAOC,EAAqBD,EAAO,IAAIW,MAAMX,EAAMK,UAEvDO,YAAe,SAAUZ,GACrB,OAAOA,EAAMa,QAEjBC,WAAcf,EACdiB,OAAU,SAAUhB,GAEhB,OAAOL,EAAOwB,KAAKnB,KAG3BM,EAAkB,QACdG,OAAUX,EACVY,MAAS,SAAUV,GACf,OAAOC,EAAqBD,EAAO,IAAIW,MAAMX,EAAMK,UAEvDO,YAAe,SAAUZ,GACrB,OAAOM,EAAkB,OAAc,WAAEN,GAAOa,QAEpDC,WAAc,SAAUd,GACpB,OAAOC,EAAqBD,EAAO,IAAIe,WAAWf,EAAMK,UAE5DW,OAAUjB,GAGPL,EAAOY,UAAYA","file":"../transform.js","sourcesContent":["define([\r\n    \"./binary\",\r\n    \"./memory\",\r\n    \"./get-type-of\",\r\n    \"./string-to-arraylike\",\r\n    \"./arraylike-to-string\"\r\n],function(binary,Memory,getTypeOf,stringToArrayLike,arrayLikeToString){\r\n\r\n    function identity(input) {\r\n        return input;\r\n    }\r\n\r\n    function arrayLikeToArrayLike(arrayFrom, arrayTo) {\r\n        for (var i = 0; i < arrayFrom.length; i++) {\r\n            arrayTo[i] = arrayFrom[i];\r\n        }\r\n        return arrayTo;\r\n    }\r\n\r\n    var transform =  function (outputType, input) {\r\n        if (!input) {\r\n            input = '';\r\n        }\r\n        if (!outputType) {\r\n            return input;\r\n        }\r\n        var inputType = getTypeOf(input);\r\n        var result = transform[inputType][outputType](input);\r\n        return result;\r\n    };\r\n    transform['string'] = {\r\n        'string': identity,\r\n        'array': function (input) {\r\n            return stringToArrayLike(input, new Array(input.length));\r\n        },\r\n        'arraybuffer': function (input) {\r\n            return transform['string']['uint8array'](input).buffer;\r\n        },\r\n        'uint8array': function (input) {\r\n            return stringToArrayLike(input, new Uint8Array(input.length));\r\n        },\r\n        'memory': function (input) {\r\n            ///return stringToArrayLike(input, nodejsUtils.allocBuffer(input.length));\r\n            return stringToArrayLike(input, Buffer.alloc(input.length));\r\n        }\r\n    };\r\n    transform['array'] = {\r\n        'string': arrayLikeToString,\r\n        'array': identity,\r\n        'arraybuffer': function (input) {\r\n            return new Uint8Array(input).buffer;\r\n        },\r\n        'uint8array': function (input) {\r\n            return new Uint8Array(input);\r\n        },\r\n        'memory': function (input) {\r\n            ///return nodejsUtils.newBufferFrom(input);\r\n            return Memory.from(input);\r\n        }\r\n    };\r\n    transform['arraybuffer'] = {\r\n        'string': function (input) {\r\n            return arrayLikeToString(new Uint8Array(input));\r\n        },\r\n        'array': function (input) {\r\n            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\r\n        },\r\n        'arraybuffer': identity,\r\n        'uint8array': function (input) {\r\n            return new Uint8Array(input);\r\n        },\r\n        'memory': function (input) {\r\n            ///return nodejsUtils.newBufferFrom(new Uint8Array(input));\r\n            return Memory.from(new Uint8Array(input));\r\n        }\r\n    };\r\n    transform['uint8array'] = {\r\n        'string': arrayLikeToString,\r\n        'array': function (input) {\r\n            return arrayLikeToArrayLike(input, new Array(input.length));\r\n        },\r\n        'arraybuffer': function (input) {\r\n            return input.buffer;\r\n        },\r\n        'uint8array': identity,\r\n        'memory': function (input) {\r\n            ///return nodejsUtils.newBufferFrom(input);\r\n            return Memory.from(input);\r\n        }\r\n    };\r\n    transform['memory'] = {\r\n        'string': arrayLikeToString,\r\n        'array': function (input) {\r\n            return arrayLikeToArrayLike(input, new Array(input.length));\r\n        },\r\n        'arraybuffer': function (input) {\r\n            return transform['memory']['uint8array'](input).buffer;\r\n        },\r\n        'uint8array': function (input) {\r\n            return arrayLikeToArrayLike(input, new Uint8Array(input.length));\r\n        },\r\n        'memory': identity\r\n    };\r\n\r\n    return binary.transform = transform;\r\n});\r\n"]}