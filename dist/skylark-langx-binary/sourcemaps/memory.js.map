{"version":3,"sources":["memory.js"],"names":["define","binary","base64","ieee754","Memory","INSPECT_MAX_BYTES","K_MAX_LENGTH","reserveMemory","length","RangeError","buf","Uint8Array","__proto__","prototype","arg","encodingOrOffset","Error","allocUnsafe","from","value","TypeError","isArrayBuffer","buffer","array","byteOffset","byteLength","undefined","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","ArrayBuffer","isView","numberIsNaN","fromArrayLike","type","Array","isArray","data","fromObject","assertSize","size","i","toString","isMemory","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","e","typedArraySupport","console","error","Object","defineProperty","get","this","Symbol","species","configurable","enumerable","writable","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","toArrayBuffer","memory","view","_isMemory","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","split","trim","replace","base64clean","src","dst","constructor","name"],"mappings":"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","file":"../memory.js","sourcesContent":["define([\r\n  \"./binary\",\r\n  \"./base64\",\r\n  \"./ieee754\"\r\n],function(binary,base64,ieee754){\r\n  /*!\r\n   * The buffer module from node.js, for the browser.\r\n   *\r\n   * @author   Feross Aboukhadijeh <https://feross.org>\r\n   * @license  MIT\r\n   */\r\n  /* eslint-disable no-proto */\r\n\r\n  'use strict'\r\n\r\n\r\n  Memory.INSPECT_MAX_BYTES = 50\r\n\r\n  var K_MAX_LENGTH = 0x7fffffff\r\n  Memory.kMaxLength = K_MAX_LENGTH\r\n\r\n  /**\r\n   * If `Memory.TYPED_ARRAY_SUPPORT`:\r\n   *   === true    Use Uint8Array implementation (fastest)\r\n   *   === false   Print warning and recommend using `buffer` v4.x which has an Object\r\n   *               implementation (most compatible, even IE6)\r\n   *\r\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n   * Opera 11.6+, iOS 4.2+.\r\n   *\r\n   * We report that the browser does not support typed arrays if the are not subclassable\r\n   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\r\n   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\r\n   * for __proto__ and has a buggy typed array implementation.\r\n   */\r\n  Memory.TYPED_ARRAY_SUPPORT = typedArraySupport()\r\n\r\n  if (!Memory.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\r\n      typeof console.error === 'function') {\r\n    console.error(\r\n      'This browser lacks typed array (Uint8Array) support which is required by ' +\r\n      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\r\n    )\r\n  }\r\n\r\n  function typedArraySupport () {\r\n    // Can typed array instances can be augmented?\r\n    try {\r\n      var arr = new Uint8Array(1)\r\n      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\r\n      return arr.foo() === 42\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(Memory.prototype, 'parent', {\r\n    get: function () {\r\n      if (!(this instanceof Memory)) {\r\n        return undefined\r\n      }\r\n      return this.buffer\r\n    }\r\n  })\r\n\r\n  Object.defineProperty(Memory.prototype, 'offset', {\r\n    get: function () {\r\n      if (!(this instanceof Memory)) {\r\n        return undefined\r\n      }\r\n      return this.byteOffset\r\n    }\r\n  })\r\n\r\n  function reserveMemory (length) {\r\n    if (length > K_MAX_LENGTH) {\r\n      throw new RangeError('Invalid typed array length')\r\n    }\r\n    // Return an augmented `Uint8Array` instance\r\n    var buf = new Uint8Array(length)\r\n    buf.__proto__ = Memory.prototype\r\n    return buf\r\n  }\r\n\r\n  /**\r\n   * The Memory constructor returns instances of `Uint8Array` that have their\r\n   * prototype changed to `Memory.prototype`. Furthermore, `Memory` is a subclass of\r\n   * `Uint8Array`, so the returned instances will have all the node `Memory` methods\r\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n   * returns a single octet.\r\n   *\r\n   * The `Uint8Array` prototype remains unmodified.\r\n   */\r\n\r\n  function Memory (arg, encodingOrOffset, length) {\r\n    // Common case.\r\n    if (typeof arg === 'number') {\r\n      if (typeof encodingOrOffset === 'string') {\r\n        throw new Error(\r\n          'If encoding is specified then the first argument must be a string'\r\n        )\r\n      }\r\n      return allocUnsafe(arg)\r\n    }\r\n    return from(arg, encodingOrOffset, length)\r\n  }\r\n\r\n  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\r\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\r\n      Memory[Symbol.species] === Memory) {\r\n    Object.defineProperty(Memory, Symbol.species, {\r\n      value: null,\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: false\r\n    })\r\n  }\r\n\r\n  Memory.poolSize = 8192 // not used by this implementation\r\n\r\n  function from (value, encodingOrOffset, length) {\r\n    if (typeof value === 'number') {\r\n      throw new TypeError('\"value\" argument must not be a number')\r\n    }\r\n\r\n    if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\r\n      return fromArrayBuffer(value, encodingOrOffset, length)\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return fromString(value, encodingOrOffset)\r\n    }\r\n\r\n    return fromObject(value)\r\n  }\r\n\r\n  /**\r\n   * Functionally equivalent to Memory(arg, encoding) but throws a TypeError\r\n   * if value is a number.\r\n   * Memory.from(str[, encoding])\r\n   * Memory.from(array)\r\n   * Memory.from(buffer)\r\n   * Memory.from(arrayBuffer[, byteOffset[, length]])\r\n   **/\r\n  Memory.from = function (value, encodingOrOffset, length) {\r\n    return from(value, encodingOrOffset, length)\r\n  }\r\n\r\n  // Note: Change prototype *after* Memory.from is defined to workaround Chrome bug:\r\n  // https://github.com/feross/buffer/pull/148\r\n  Memory.prototype.__proto__ = Uint8Array.prototype\r\n  Memory.__proto__ = Uint8Array\r\n\r\n  function assertSize (size) {\r\n    if (typeof size !== 'number') {\r\n      throw new TypeError('\"size\" argument must be of type number')\r\n    } else if (size < 0) {\r\n      throw new RangeError('\"size\" argument must not be negative')\r\n    }\r\n  }\r\n\r\n  function alloc (size, fill, encoding) {\r\n    assertSize(size)\r\n    if (size <= 0) {\r\n      return reserveMemory(size)\r\n    }\r\n    if (fill !== undefined) {\r\n      // Only pay attention to encoding if it's a string. This\r\n      // prevents accidentally sending in a number that would\r\n      // be interpretted as a start offset.\r\n      return typeof encoding === 'string'\r\n        ? reserveMemory(size).fill(fill, encoding)\r\n        : reserveMemory(size).fill(fill)\r\n    }\r\n    return reserveMemory(size)\r\n  }\r\n\r\n  /**\r\n   * Creates a new filled Memory instance.\r\n   * alloc(size[, fill[, encoding]])\r\n   **/\r\n  Memory.alloc = function (size, fill, encoding) {\r\n    return alloc(size, fill, encoding)\r\n  }\r\n\r\n  function allocUnsafe (size) {\r\n    assertSize(size)\r\n    return reserveMemory(size < 0 ? 0 : checked(size) | 0)\r\n  }\r\n\r\n  /**\r\n   * Equivalent to Memory(num), by default creates a non-zero-filled Memory instance.\r\n   * */\r\n  Memory.allocUnsafe = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n  /**\r\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Memory instance.\r\n   */\r\n  Memory.allocUnsafeSlow = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n\r\n  function fromString (string, encoding) {\r\n    if (typeof encoding !== 'string' || encoding === '') {\r\n      encoding = 'utf8'\r\n    }\r\n\r\n    if (!Memory.isEncoding(encoding)) {\r\n      throw new TypeError('Unknown encoding: ' + encoding)\r\n    }\r\n\r\n    var length = byteLength(string, encoding) | 0\r\n    var buf = reserveMemory(length)\r\n\r\n    var actual = buf.write(string, encoding)\r\n\r\n    if (actual !== length) {\r\n      // Writing a hex string, for example, that contains invalid characters will\r\n      // cause everything after the first invalid character to be ignored. (e.g.\r\n      // 'abxxcd' will be treated as 'ab')\r\n      buf = buf.slice(0, actual)\r\n    }\r\n\r\n    return buf\r\n  }\r\n\r\n  function fromArrayLike (array) {\r\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\r\n    var buf = reserveMemory(length)\r\n    for (var i = 0; i < length; i += 1) {\r\n      buf[i] = array[i] & 255\r\n    }\r\n    return buf\r\n  }\r\n\r\n  function fromArrayBuffer (array, byteOffset, length) {\r\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\r\n      throw new RangeError('\"offset\" is outside of buffer bounds')\r\n    }\r\n\r\n    if (array.byteLength < byteOffset + (length || 0)) {\r\n      throw new RangeError('\"length\" is outside of buffer bounds')\r\n    }\r\n\r\n    var buf\r\n    if (byteOffset === undefined && length === undefined) {\r\n      buf = new Uint8Array(array)\r\n    } else if (length === undefined) {\r\n      buf = new Uint8Array(array, byteOffset)\r\n    } else {\r\n      buf = new Uint8Array(array, byteOffset, length)\r\n    }\r\n\r\n    // Return an augmented `Uint8Array` instance\r\n    buf.__proto__ = Memory.prototype\r\n    return buf\r\n  }\r\n\r\n  function fromObject (obj) {\r\n    if (Memory.isBuffer(obj)) {\r\n      var len = checked(obj.length) | 0\r\n      var buf = reserveMemory(len)\r\n\r\n      if (buf.length === 0) {\r\n        return buf\r\n      }\r\n\r\n      obj.copy(buf, 0, 0, len)\r\n      return buf\r\n    }\r\n\r\n    if (obj) {\r\n      if (ArrayBuffer.isView(obj) || 'length' in obj) {\r\n        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\r\n          return reserveMemory(0)\r\n        }\r\n        return fromArrayLike(obj)\r\n      }\r\n\r\n      if (obj.type === 'Memory' && Array.isArray(obj.data)) {\r\n        return fromArrayLike(obj.data)\r\n      }\r\n    }\r\n\r\n    throw new TypeError('The first argument must be one of type string, Memory, ArrayBuffer, Array, or Array-like Object.')\r\n  }\r\n\r\n  function checked (length) {\r\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\r\n    // length is NaN (which is otherwise coerced to zero.)\r\n    if (length >= K_MAX_LENGTH) {\r\n      throw new RangeError('Attempt to allocate Memory larger than maximum ' +\r\n                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\r\n    }\r\n    return length | 0\r\n  }\r\n\r\n  function SlowBuffer (length) {\r\n    if (+length != length) { // eslint-disable-line eqeqeq\r\n      length = 0\r\n    }\r\n    return Memory.alloc(+length)\r\n  }\r\n\r\n  Memory.isMemory = Memory.isBuffer = function isMemory (b) {\r\n    return b != null && b._isBuffer === true\r\n  }\r\n\r\n  Memory.compare = function compare (a, b) {\r\n    if (!Memory.isMemory(a) || !Memory.isMemory(b)) {\r\n      throw new TypeError('Arguments must be Buffers')\r\n    }\r\n\r\n    if (a === b) return 0\r\n\r\n    var x = a.length\r\n    var y = b.length\r\n\r\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\r\n      if (a[i] !== b[i]) {\r\n        x = a[i]\r\n        y = b[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  Memory.isEncoding = function isEncoding (encoding) {\r\n    switch (String(encoding).toLowerCase()) {\r\n      case 'hex':\r\n      case 'utf8':\r\n      case 'utf-8':\r\n      case 'ascii':\r\n      case 'latin1':\r\n      case 'binary':\r\n      case 'base64':\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return true\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n\r\n  Memory.concat = function concat (list, length) {\r\n    if (!Array.isArray(list)) {\r\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n    }\r\n\r\n    if (list.length === 0) {\r\n      return Memory.alloc(0)\r\n    }\r\n\r\n    var i\r\n    if (length === undefined) {\r\n      length = 0\r\n      for (i = 0; i < list.length; ++i) {\r\n        length += list[i].length\r\n      }\r\n    }\r\n\r\n    var buffer = Memory.allocUnsafe(length)\r\n    var pos = 0\r\n    for (i = 0; i < list.length; ++i) {\r\n      var buf = list[i]\r\n      if (ArrayBuffer.isView(buf)) {\r\n        buf = Memory.from(buf)\r\n      }\r\n      if (!Memory.isMemory(buf)) {\r\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n      }\r\n      buf.copy(buffer, pos)\r\n      pos += buf.length\r\n    }\r\n    return buffer\r\n  }\r\n\r\n  function byteLength (string, encoding) {\r\n    if (Memory.isMemory(string)) {\r\n      return string.length\r\n    }\r\n    if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\r\n      return string.byteLength\r\n    }\r\n    if (typeof string !== 'string') {\r\n      string = '' + string\r\n    }\r\n\r\n    var len = string.length\r\n    if (len === 0) return 0\r\n\r\n    // Use a for loop to avoid recursion\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'ascii':\r\n        case 'latin1':\r\n        case 'binary':\r\n          return len\r\n        case 'utf8':\r\n        case 'utf-8':\r\n        case undefined:\r\n          return utf8ToBytes(string).length\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return len * 2\r\n        case 'hex':\r\n          return len >>> 1\r\n        case 'base64':\r\n          return base64ToBytes(string).length\r\n        default:\r\n          if (loweredCase) return utf8ToBytes(string).length // assume utf8\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n  Memory.byteLength = byteLength\r\n\r\n\r\n  /**\r\n   * Create arraybuffer from memory\r\n   *\r\n   * @method toArrayBuffer\r\n   * @param {Buffer} buffer\r\n   * @return {Arraybuffer} data\r\n   */\r\n  Memory.toArrayBuffer = function(memory) {\r\n    var array = new ArrayBuffer(memory.length);\r\n    var view = new Uint8Array(array);\r\n\r\n    for(var i = 0; i < memory.length; i++){\r\n      view[i] = memory[i];\r\n    }\r\n\r\n    return array;\r\n\r\n    //Faster but the results is failing the \"instanceof ArrayBuffer\" test\r\n    //return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n  }\r\n\r\n  function slowToString (encoding, start, end) {\r\n    var loweredCase = false\r\n\r\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\r\n    // property of a typed array.\r\n\r\n    // This behaves neither like String nor Uint8Array in that we set start/end\r\n    // to their upper/lower bounds if the value passed is out of range.\r\n    // undefined is handled specially as per ECMA-262 6th Edition,\r\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\r\n    if (start === undefined || start < 0) {\r\n      start = 0\r\n    }\r\n    // Return early if start > this.length. Done here to prevent potential uint32\r\n    // coercion fail below.\r\n    if (start > this.length) {\r\n      return ''\r\n    }\r\n\r\n    if (end === undefined || end > this.length) {\r\n      end = this.length\r\n    }\r\n\r\n    if (end <= 0) {\r\n      return ''\r\n    }\r\n\r\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\r\n    end >>>= 0\r\n    start >>>= 0\r\n\r\n    if (end <= start) {\r\n      return ''\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    while (true) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexSlice(this, start, end)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Slice(this, start, end)\r\n\r\n        case 'ascii':\r\n          return asciiSlice(this, start, end)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Slice(this, start, end)\r\n\r\n        case 'base64':\r\n          return base64Slice(this, start, end)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return utf16leSlice(this, start, end)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = (encoding + '').toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  // This property is used by `Memory.isMemory` \r\n  // to detect a Memory instance. \r\n  Memory.prototype._isMemory = true\r\n\r\n  function swap (b, n, m) {\r\n    var i = b[n]\r\n    b[n] = b[m]\r\n    b[m] = i\r\n  }\r\n\r\n  Memory.prototype.swap16 = function swap16 () {\r\n    var len = this.length\r\n    if (len % 2 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 16-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 2) {\r\n      swap(this, i, i + 1)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.swap32 = function swap32 () {\r\n    var len = this.length\r\n    if (len % 4 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 32-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3)\r\n      swap(this, i + 1, i + 2)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.swap64 = function swap64 () {\r\n    var len = this.length\r\n    if (len % 8 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 64-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7)\r\n      swap(this, i + 1, i + 6)\r\n      swap(this, i + 2, i + 5)\r\n      swap(this, i + 3, i + 4)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.toString = function toString () {\r\n    var length = this.length\r\n    if (length === 0) return ''\r\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\r\n    return slowToString.apply(this, arguments)\r\n  }\r\n\r\n  Memory.prototype.toLocaleString = Memory.prototype.toString\r\n\r\n  Memory.prototype.equals = function equals (b) {\r\n    if (!Memory.isMemory(b)) throw new TypeError('Argument must be a Memory')\r\n    if (this === b) return true\r\n    return Memory.compare(this, b) === 0\r\n  }\r\n\r\n  Memory.prototype.inspect = function inspect () {\r\n    var str = ''\r\n    var max = Memory.INSPECT_MAX_BYTES\r\n    if (this.length > 0) {\r\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\r\n      if (this.length > max) str += ' ... '\r\n    }\r\n    return '<Memory ' + str + '>'\r\n  }\r\n\r\n  Memory.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\r\n    if (!Memory.isMemory(target)) {\r\n      throw new TypeError('Argument must be a Memory')\r\n    }\r\n\r\n    if (start === undefined) {\r\n      start = 0\r\n    }\r\n    if (end === undefined) {\r\n      end = target ? target.length : 0\r\n    }\r\n    if (thisStart === undefined) {\r\n      thisStart = 0\r\n    }\r\n    if (thisEnd === undefined) {\r\n      thisEnd = this.length\r\n    }\r\n\r\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\r\n      throw new RangeError('out of range index')\r\n    }\r\n\r\n    if (thisStart >= thisEnd && start >= end) {\r\n      return 0\r\n    }\r\n    if (thisStart >= thisEnd) {\r\n      return -1\r\n    }\r\n    if (start >= end) {\r\n      return 1\r\n    }\r\n\r\n    start >>>= 0\r\n    end >>>= 0\r\n    thisStart >>>= 0\r\n    thisEnd >>>= 0\r\n\r\n    if (this === target) return 0\r\n\r\n    var x = thisEnd - thisStart\r\n    var y = end - start\r\n    var len = Math.min(x, y)\r\n\r\n    var thisCopy = this.slice(thisStart, thisEnd)\r\n    var targetCopy = target.slice(start, end)\r\n\r\n    for (var i = 0; i < len; ++i) {\r\n      if (thisCopy[i] !== targetCopy[i]) {\r\n        x = thisCopy[i]\r\n        y = targetCopy[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n  //\r\n  // Arguments:\r\n  // - buffer - a Memory to search\r\n  // - val - a string, Memory, or number\r\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\r\n  // - encoding - an optional encoding, relevant is val is a string\r\n  // - dir - true for indexOf, false for lastIndexOf\r\n  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\r\n    // Empty buffer means no match\r\n    if (buffer.length === 0) return -1\r\n\r\n    // Normalize byteOffset\r\n    if (typeof byteOffset === 'string') {\r\n      encoding = byteOffset\r\n      byteOffset = 0\r\n    } else if (byteOffset > 0x7fffffff) {\r\n      byteOffset = 0x7fffffff\r\n    } else if (byteOffset < -0x80000000) {\r\n      byteOffset = -0x80000000\r\n    }\r\n    byteOffset = +byteOffset  // Coerce to Number.\r\n    if (numberIsNaN(byteOffset)) {\r\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\r\n      byteOffset = dir ? 0 : (buffer.length - 1)\r\n    }\r\n\r\n    // Normalize byteOffset: negative offsets start from the end of the buffer\r\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\r\n    if (byteOffset >= buffer.length) {\r\n      if (dir) return -1\r\n      else byteOffset = buffer.length - 1\r\n    } else if (byteOffset < 0) {\r\n      if (dir) byteOffset = 0\r\n      else return -1\r\n    }\r\n\r\n    // Normalize val\r\n    if (typeof val === 'string') {\r\n      val = Memory.from(val, encoding)\r\n    }\r\n\r\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\r\n    if (Memory.isMemory(val)) {\r\n      // Special case: looking for empty string/buffer always fails\r\n      if (val.length === 0) {\r\n        return -1\r\n      }\r\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\r\n    } else if (typeof val === 'number') {\r\n      val = val & 0xFF // Search for a byte value [0-255]\r\n      if (typeof Uint8Array.prototype.indexOf === 'function') {\r\n        if (dir) {\r\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\r\n        } else {\r\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\r\n        }\r\n      }\r\n      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\r\n    }\r\n\r\n    throw new TypeError('val must be string, number or Memory')\r\n  }\r\n\r\n  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {\r\n    var indexSize = 1\r\n    var arrLength = arr.length\r\n    var valLength = val.length\r\n\r\n    if (encoding !== undefined) {\r\n      encoding = String(encoding).toLowerCase()\r\n      if (encoding === 'ucs2' || encoding === 'ucs-2' ||\r\n          encoding === 'utf16le' || encoding === 'utf-16le') {\r\n        if (arr.length < 2 || val.length < 2) {\r\n          return -1\r\n        }\r\n        indexSize = 2\r\n        arrLength /= 2\r\n        valLength /= 2\r\n        byteOffset /= 2\r\n      }\r\n    }\r\n\r\n    function read (buf, i) {\r\n      if (indexSize === 1) {\r\n        return buf[i]\r\n      } else {\r\n        return buf.readUInt16BE(i * indexSize)\r\n      }\r\n    }\r\n\r\n    var i\r\n    if (dir) {\r\n      var foundIndex = -1\r\n      for (i = byteOffset; i < arrLength; i++) {\r\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\r\n          if (foundIndex === -1) foundIndex = i\r\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\r\n        } else {\r\n          if (foundIndex !== -1) i -= i - foundIndex\r\n          foundIndex = -1\r\n        }\r\n      }\r\n    } else {\r\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\r\n      for (i = byteOffset; i >= 0; i--) {\r\n        var found = true\r\n        for (var j = 0; j < valLength; j++) {\r\n          if (read(arr, i + j) !== read(val, j)) {\r\n            found = false\r\n            break\r\n          }\r\n        }\r\n        if (found) return i\r\n      }\r\n    }\r\n\r\n    return -1\r\n  }\r\n\r\n  Memory.prototype.includes = function includes (val, byteOffset, encoding) {\r\n    return this.indexOf(val, byteOffset, encoding) !== -1\r\n  }\r\n\r\n  Memory.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\r\n  }\r\n\r\n  Memory.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\r\n  }\r\n\r\n  function hexWrite (buf, string, offset, length) {\r\n    offset = Number(offset) || 0\r\n    var remaining = buf.length - offset\r\n    if (!length) {\r\n      length = remaining\r\n    } else {\r\n      length = Number(length)\r\n      if (length > remaining) {\r\n        length = remaining\r\n      }\r\n    }\r\n\r\n    var strLen = string.length\r\n\r\n    if (length > strLen / 2) {\r\n      length = strLen / 2\r\n    }\r\n    for (var i = 0; i < length; ++i) {\r\n      var parsed = parseInt(string.substr(i * 2, 2), 16)\r\n      if (numberIsNaN(parsed)) return i\r\n      buf[offset + i] = parsed\r\n    }\r\n    return i\r\n  }\r\n\r\n  function utf8Write (buf, string, offset, length) {\r\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  function asciiWrite (buf, string, offset, length) {\r\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function latin1Write (buf, string, offset, length) {\r\n    return asciiWrite(buf, string, offset, length)\r\n  }\r\n\r\n  function base64Write (buf, string, offset, length) {\r\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function ucs2Write (buf, string, offset, length) {\r\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  Memory.prototype.write = function write (string, offset, length, encoding) {\r\n    // Memory#write(string)\r\n    if (offset === undefined) {\r\n      encoding = 'utf8'\r\n      length = this.length\r\n      offset = 0\r\n    // Memory#write(string, encoding)\r\n    } else if (length === undefined && typeof offset === 'string') {\r\n      encoding = offset\r\n      length = this.length\r\n      offset = 0\r\n    // Memory#write(string, offset[, length][, encoding])\r\n    } else if (isFinite(offset)) {\r\n      offset = offset >>> 0\r\n      if (isFinite(length)) {\r\n        length = length >>> 0\r\n        if (encoding === undefined) encoding = 'utf8'\r\n      } else {\r\n        encoding = length\r\n        length = undefined\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        'Memory.write(string, encoding, offset[, length]) is no longer supported'\r\n      )\r\n    }\r\n\r\n    var remaining = this.length - offset\r\n    if (length === undefined || length > remaining) length = remaining\r\n\r\n    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\r\n      throw new RangeError('Attempt to write outside buffer bounds')\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexWrite(this, string, offset, length)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Write(this, string, offset, length)\r\n\r\n        case 'ascii':\r\n          return asciiWrite(this, string, offset, length)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Write(this, string, offset, length)\r\n\r\n        case 'base64':\r\n          // Warning: maxLength not taken into account in base64Write\r\n          return base64Write(this, string, offset, length)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return ucs2Write(this, string, offset, length)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  Memory.prototype.toJSON = function toJSON () {\r\n    return {\r\n      type: 'Memory',\r\n      data: Array.prototype.slice.call(this._arr || this, 0)\r\n    }\r\n  }\r\n\r\n  function base64Slice (buf, start, end) {\r\n    if (start === 0 && end === buf.length) {\r\n      return base64.fromByteArray(buf)\r\n    } else {\r\n      return base64.fromByteArray(buf.slice(start, end))\r\n    }\r\n  }\r\n\r\n  function utf8Slice (buf, start, end) {\r\n    end = Math.min(buf.length, end)\r\n    var res = []\r\n\r\n    var i = start\r\n    while (i < end) {\r\n      var firstByte = buf[i]\r\n      var codePoint = null\r\n      var bytesPerSequence = (firstByte > 0xEF) ? 4\r\n        : (firstByte > 0xDF) ? 3\r\n        : (firstByte > 0xBF) ? 2\r\n        : 1\r\n\r\n      if (i + bytesPerSequence <= end) {\r\n        var secondByte, thirdByte, fourthByte, tempCodePoint\r\n\r\n        switch (bytesPerSequence) {\r\n          case 1:\r\n            if (firstByte < 0x80) {\r\n              codePoint = firstByte\r\n            }\r\n            break\r\n          case 2:\r\n            secondByte = buf[i + 1]\r\n            if ((secondByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\r\n              if (tempCodePoint > 0x7F) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 3:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\r\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 4:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            fourthByte = buf[i + 3]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\r\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      if (codePoint === null) {\r\n        // we did not generate a valid codePoint so insert a\r\n        // replacement char (U+FFFD) and advance only 1 byte\r\n        codePoint = 0xFFFD\r\n        bytesPerSequence = 1\r\n      } else if (codePoint > 0xFFFF) {\r\n        // encode to utf16 (surrogate pair dance)\r\n        codePoint -= 0x10000\r\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800)\r\n        codePoint = 0xDC00 | codePoint & 0x3FF\r\n      }\r\n\r\n      res.push(codePoint)\r\n      i += bytesPerSequence\r\n    }\r\n\r\n    return decodeCodePointsArray(res)\r\n  }\r\n\r\n  // Based on http://stackoverflow.com/a/22747272/680742, the browser with\r\n  // the lowest limit is Chrome, with 0x10000 args.\r\n  // We go 1 magnitude less, for safety\r\n  var MAX_ARGUMENTS_LENGTH = 0x1000\r\n\r\n  function decodeCodePointsArray (codePoints) {\r\n    var len = codePoints.length\r\n    if (len <= MAX_ARGUMENTS_LENGTH) {\r\n      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\r\n    }\r\n\r\n    // Decode in chunks to avoid \"call stack size exceeded\".\r\n    var res = ''\r\n    var i = 0\r\n    while (i < len) {\r\n      res += String.fromCharCode.apply(\r\n        String,\r\n        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n      )\r\n    }\r\n    return res\r\n  }\r\n\r\n  function asciiSlice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i] & 0x7F)\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function latin1Slice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i])\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function hexSlice (buf, start, end) {\r\n    var len = buf.length\r\n\r\n    if (!start || start < 0) start = 0\r\n    if (!end || end < 0 || end > len) end = len\r\n\r\n    var out = ''\r\n    for (var i = start; i < end; ++i) {\r\n      out += toHex(buf[i])\r\n    }\r\n    return out\r\n  }\r\n\r\n  function utf16leSlice (buf, start, end) {\r\n    var bytes = buf.slice(start, end)\r\n    var res = ''\r\n    for (var i = 0; i < bytes.length; i += 2) {\r\n      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\r\n    }\r\n    return res\r\n  }\r\n\r\n  Memory.prototype.slice = function slice (start, end) {\r\n    var len = this.length\r\n    start = ~~start\r\n    end = end === undefined ? len : ~~end\r\n\r\n    if (start < 0) {\r\n      start += len\r\n      if (start < 0) start = 0\r\n    } else if (start > len) {\r\n      start = len\r\n    }\r\n\r\n    if (end < 0) {\r\n      end += len\r\n      if (end < 0) end = 0\r\n    } else if (end > len) {\r\n      end = len\r\n    }\r\n\r\n    if (end < start) end = start\r\n\r\n    var newBuf = this.subarray(start, end)\r\n    // Return an augmented `Uint8Array` instance\r\n    newBuf.__proto__ = Memory.prototype\r\n    return newBuf\r\n  }\r\n\r\n  /*\r\n   * Need to make sure that buffer isn't trying to write out of bounds.\r\n   */\r\n  function checkOffset (offset, ext, length) {\r\n    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\r\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\r\n  }\r\n\r\n  Memory.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      checkOffset(offset, byteLength, this.length)\r\n    }\r\n\r\n    var val = this[offset + --byteLength]\r\n    var mul = 1\r\n    while (byteLength > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --byteLength] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    return this[offset]\r\n  }\r\n\r\n  Memory.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return this[offset] | (this[offset + 1] << 8)\r\n  }\r\n\r\n  Memory.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return (this[offset] << 8) | this[offset + 1]\r\n  }\r\n\r\n  Memory.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return ((this[offset]) |\r\n        (this[offset + 1] << 8) |\r\n        (this[offset + 2] << 16)) +\r\n        (this[offset + 3] * 0x1000000)\r\n  }\r\n\r\n  Memory.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] * 0x1000000) +\r\n      ((this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      this[offset + 3])\r\n  }\r\n\r\n  Memory.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var i = byteLength\r\n    var mul = 1\r\n    var val = this[offset + --i]\r\n    while (i > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readInt8 = function readInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    if (!(this[offset] & 0x80)) return (this[offset])\r\n    return ((0xff - this[offset] + 1) * -1)\r\n  }\r\n\r\n  Memory.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset] | (this[offset + 1] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Memory.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset + 1] | (this[offset] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Memory.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset]) |\r\n      (this[offset + 1] << 8) |\r\n      (this[offset + 2] << 16) |\r\n      (this[offset + 3] << 24)\r\n  }\r\n\r\n  Memory.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] << 24) |\r\n      (this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      (this[offset + 3])\r\n  }\r\n\r\n  Memory.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, true, 23, 4)\r\n  }\r\n\r\n  Memory.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, false, 23, 4)\r\n  }\r\n\r\n  Memory.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, true, 52, 8)\r\n  }\r\n\r\n  Memory.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, false, 52, 8)\r\n  }\r\n\r\n  function checkInt (buf, value, offset, ext, max, min) {\r\n    if (!Memory.isMemory(buf)) throw new TypeError('\"buffer\" argument must be a Memory instance')\r\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  Memory.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var mul = 1\r\n    var i = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Memory.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset + 3] = (value >>> 24)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = 0\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\r\n    if (value < 0) value = 0xff + value + 1\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Memory.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 3] = (value >>> 24)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    if (value < 0) value = 0xffffffff + value + 1\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  function checkIEEE754 (buf, value, offset, ext, max, min) {\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n    if (offset < 0) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  function writeFloat (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 23, 4)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Memory.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  function writeDouble (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 52, 8)\r\n    return offset + 8\r\n  }\r\n\r\n  Memory.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Memory.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\r\n  Memory.prototype.copy = function copy (target, targetStart, start, end) {\r\n    if (!Memory.isMemory(target)) throw new TypeError('argument should be a Memory')\r\n    if (!start) start = 0\r\n    if (!end && end !== 0) end = this.length\r\n    if (targetStart >= target.length) targetStart = target.length\r\n    if (!targetStart) targetStart = 0\r\n    if (end > 0 && end < start) end = start\r\n\r\n    // Copy 0 bytes; we're done\r\n    if (end === start) return 0\r\n    if (target.length === 0 || this.length === 0) return 0\r\n\r\n    // Fatal error conditions\r\n    if (targetStart < 0) {\r\n      throw new RangeError('targetStart out of bounds')\r\n    }\r\n    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\r\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\r\n\r\n    // Are we oob?\r\n    if (end > this.length) end = this.length\r\n    if (target.length - targetStart < end - start) {\r\n      end = target.length - targetStart + start\r\n    }\r\n\r\n    var len = end - start\r\n\r\n    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\r\n      // Use built-in when available, missing from IE11\r\n      this.copyWithin(targetStart, start, end)\r\n    } else if (this === target && start < targetStart && targetStart < end) {\r\n      // descending copy from end\r\n      for (var i = len - 1; i >= 0; --i) {\r\n        target[i + targetStart] = this[i + start]\r\n      }\r\n    } else {\r\n      Uint8Array.prototype.set.call(\r\n        target,\r\n        this.subarray(start, end),\r\n        targetStart\r\n      )\r\n    }\r\n\r\n    return len\r\n  }\r\n\r\n  // Usage:\r\n  //    buffer.fill(number[, offset[, end]])\r\n  //    buffer.fill(buffer[, offset[, end]])\r\n  //    buffer.fill(string[, offset[, end]][, encoding])\r\n  Memory.prototype.fill = function fill (val, start, end, encoding) {\r\n    // Handle string cases:\r\n    if (typeof val === 'string') {\r\n      if (typeof start === 'string') {\r\n        encoding = start\r\n        start = 0\r\n        end = this.length\r\n      } else if (typeof end === 'string') {\r\n        encoding = end\r\n        end = this.length\r\n      }\r\n      if (encoding !== undefined && typeof encoding !== 'string') {\r\n        throw new TypeError('encoding must be a string')\r\n      }\r\n      if (typeof encoding === 'string' && !Memory.isEncoding(encoding)) {\r\n        throw new TypeError('Unknown encoding: ' + encoding)\r\n      }\r\n      if (val.length === 1) {\r\n        var code = val.charCodeAt(0)\r\n        if ((encoding === 'utf8' && code < 128) ||\r\n            encoding === 'latin1') {\r\n          // Fast path: If `val` fits into a single byte, use that numeric value.\r\n          val = code\r\n        }\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      val = val & 255\r\n    }\r\n\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (start < 0 || this.length < start || this.length < end) {\r\n      throw new RangeError('Out of range index')\r\n    }\r\n\r\n    if (end <= start) {\r\n      return this\r\n    }\r\n\r\n    start = start >>> 0\r\n    end = end === undefined ? this.length : end >>> 0\r\n\r\n    if (!val) val = 0\r\n\r\n    var i\r\n    if (typeof val === 'number') {\r\n      for (i = start; i < end; ++i) {\r\n        this[i] = val\r\n      }\r\n    } else {\r\n      var bytes = Memory.isMemory(val)\r\n        ? val\r\n        : new Memory(val, encoding)\r\n      var len = bytes.length\r\n      if (len === 0) {\r\n        throw new TypeError('The value \"' + val +\r\n          '\" is invalid for argument \"value\"')\r\n      }\r\n      for (i = 0; i < end - start; ++i) {\r\n        this[i + start] = bytes[i % len]\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  // HELPER FUNCTIONS\r\n  // ================\r\n\r\n  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\r\n\r\n  function base64clean (str) {\r\n    // Node takes equal signs as end of the Base64 encoding\r\n    str = str.split('=')[0]\r\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\r\n    str = str.trim().replace(INVALID_BASE64_RE, '')\r\n    // Node converts strings with length < 2 to ''\r\n    if (str.length < 2) return ''\r\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\r\n    while (str.length % 4 !== 0) {\r\n      str = str + '='\r\n    }\r\n    return str\r\n  }\r\n\r\n  function toHex (n) {\r\n    if (n < 16) return '0' + n.toString(16)\r\n    return n.toString(16)\r\n  }\r\n\r\n  function utf8ToBytes (string, units) {\r\n    units = units || Infinity\r\n    var codePoint\r\n    var length = string.length\r\n    var leadSurrogate = null\r\n    var bytes = []\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      codePoint = string.charCodeAt(i)\r\n\r\n      // is surrogate component\r\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\r\n        // last char was a lead\r\n        if (!leadSurrogate) {\r\n          // no lead yet\r\n          if (codePoint > 0xDBFF) {\r\n            // unexpected trail\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          } else if (i + 1 === length) {\r\n            // unpaired lead\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          }\r\n\r\n          // valid lead\r\n          leadSurrogate = codePoint\r\n\r\n          continue\r\n        }\r\n\r\n        // 2 leads in a row\r\n        if (codePoint < 0xDC00) {\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n          leadSurrogate = codePoint\r\n          continue\r\n        }\r\n\r\n        // valid surrogate pair\r\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\r\n      } else if (leadSurrogate) {\r\n        // valid bmp char, but last char was a lead\r\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n      }\r\n\r\n      leadSurrogate = null\r\n\r\n      // encode utf8\r\n      if (codePoint < 0x80) {\r\n        if ((units -= 1) < 0) break\r\n        bytes.push(codePoint)\r\n      } else if (codePoint < 0x800) {\r\n        if ((units -= 2) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x6 | 0xC0,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x10000) {\r\n        if ((units -= 3) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0xC | 0xE0,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x110000) {\r\n        if ((units -= 4) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x12 | 0xF0,\r\n          codePoint >> 0xC & 0x3F | 0x80,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else {\r\n        throw new Error('Invalid code point')\r\n      }\r\n    }\r\n\r\n    return bytes\r\n  }\r\n\r\n  function asciiToBytes (str) {\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      // Node's code seems to be doing this and not & 0x7F..\r\n      byteArray.push(str.charCodeAt(i) & 0xFF)\r\n    }\r\n    return byteArray\r\n  }\r\n\r\n  function utf16leToBytes (str, units) {\r\n    var c, hi, lo\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      if ((units -= 2) < 0) break\r\n\r\n      c = str.charCodeAt(i)\r\n      hi = c >> 8\r\n      lo = c % 256\r\n      byteArray.push(lo)\r\n      byteArray.push(hi)\r\n    }\r\n\r\n    return byteArray\r\n  }\r\n\r\n  function base64ToBytes (str) {\r\n    return base64.toByteArray(base64clean(str))\r\n  }\r\n\r\n  function blitBuffer (src, dst, offset, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      if ((i + offset >= dst.length) || (i >= src.length)) break\r\n      dst[i + offset] = src[i]\r\n    }\r\n    return i\r\n  }\r\n\r\n  // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\r\n  // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\r\n  function isArrayBuffer (obj) {\r\n    return obj instanceof ArrayBuffer ||\r\n      (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\r\n        typeof obj.byteLength === 'number')\r\n  }\r\n\r\n  function numberIsNaN (obj) {\r\n    return obj !== obj // eslint-disable-line no-self-compare\r\n  }\r\n\r\n  return binary.Memory = Memory;\r\n\r\n});"]}