{"version":3,"sources":["memory.js"],"names":["define","binary","base64","ieee754","Memory","INSPECT_MAX_BYTES","K_MAX_LENGTH","reserveMemory","length","RangeError","buf","Uint8Array","__proto__","prototype","arg","encodingOrOffset","from","Error","allocUnsafe","value","TypeError","isArrayBuffer","buffer","fromArrayBuffer","array","byteOffset","byteLength","undefined","obj","isBuffer","len","checked","copy","ArrayBuffer","isView","numberIsNaN","fromArrayLike","type","Array","isArray","data","fromString","string","encoding","isEncoding","actual","write","slice","assertSize","size","i","toString","isMemory","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","this","hexSlice","out","n","utf8Slice","asciiSlice","ret","Math","min","String","fromCharCode","latin1Slice","fromByteArray","utf16leSlice","bytes","res","swap","b","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","lastIndexOf","call","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","asciiWrite","offset","blitBuffer","str","byteArray","push","charCodeAt","ucs2Write","units","c","hi","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","apply","kMaxLength","TYPED_ARRAY_SUPPORT","foo","e","console","error","Object","defineProperty","get","Symbol","species","configurable","enumerable","writable","poolSize","alloc","fill","allocUnsafeSlow","_isMemory","compare","a","x","y","concat","list","pos","toArrayBuffer","memory","view","swap16","swap32","swap64","toLocaleString","arguments","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","remaining","hexWrite","Number","strLen","parsed","parseInt","substr","toJSON","_arr","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","split","trim","replace","src","dst","constructor","name"],"mappings":"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","file":"../memory.js","sourcesContent":["define([\r\n  \"./binary\",\r\n  \"./base64\",\r\n  \"./ieee754\"\r\n],function(binary,base64,ieee754){\r\n  /*!\r\n   * The buffer module from node.js, for the browser.\r\n   *\r\n   * @author   Feross Aboukhadijeh <https://feross.org>\r\n   * @license  MIT\r\n   */\r\n  /* eslint-disable no-proto */\r\n\r\n  'use strict'\r\n\r\n\r\n  Memory.INSPECT_MAX_BYTES = 50\r\n\r\n  var K_MAX_LENGTH = 0x7fffffff\r\n  Memory.kMaxLength = K_MAX_LENGTH\r\n\r\n  /**\r\n   * If `Memory.TYPED_ARRAY_SUPPORT`:\r\n   *   === true    Use Uint8Array implementation (fastest)\r\n   *   === false   Print warning and recommend using `buffer` v4.x which has an Object\r\n   *               implementation (most compatible, even IE6)\r\n   *\r\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n   * Opera 11.6+, iOS 4.2+.\r\n   *\r\n   * We report that the browser does not support typed arrays if the are not subclassable\r\n   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\r\n   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\r\n   * for __proto__ and has a buggy typed array implementation.\r\n   */\r\n  Memory.TYPED_ARRAY_SUPPORT = typedArraySupport()\r\n\r\n  if (!Memory.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\r\n      typeof console.error === 'function') {\r\n    console.error(\r\n      'This browser lacks typed array (Uint8Array) support which is required by ' +\r\n      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\r\n    )\r\n  }\r\n\r\n  function typedArraySupport () {\r\n    // Can typed array instances can be augmented?\r\n    try {\r\n      var arr = new Uint8Array(1)\r\n      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\r\n      return arr.foo() === 42\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(Memory.prototype, 'parent', {\r\n    get: function () {\r\n      if (!(this instanceof Memory)) {\r\n        return undefined\r\n      }\r\n      return this.buffer\r\n    }\r\n  })\r\n\r\n  Object.defineProperty(Memory.prototype, 'offset', {\r\n    get: function () {\r\n      if (!(this instanceof Memory)) {\r\n        return undefined\r\n      }\r\n      return this.byteOffset\r\n    }\r\n  })\r\n\r\n  function reserveMemory (length) {\r\n    if (length > K_MAX_LENGTH) {\r\n      throw new RangeError('Invalid typed array length')\r\n    }\r\n    // Return an augmented `Uint8Array` instance\r\n    var buf = new Uint8Array(length)\r\n    buf.__proto__ = Memory.prototype\r\n    return buf\r\n  }\r\n\r\n  /**\r\n   * The Memory constructor returns instances of `Uint8Array` that have their\r\n   * prototype changed to `Memory.prototype`. Furthermore, `Memory` is a subclass of\r\n   * `Uint8Array`, so the returned instances will have all the node `Memory` methods\r\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n   * returns a single octet.\r\n   *\r\n   * The `Uint8Array` prototype remains unmodified.\r\n   */\r\n\r\n  function Memory (arg, encodingOrOffset, length) {\r\n    // Common case.\r\n    if (typeof arg === 'number') {\r\n      if (typeof encodingOrOffset === 'string') {\r\n        throw new Error(\r\n          'If encoding is specified then the first argument must be a string'\r\n        )\r\n      }\r\n      return allocUnsafe(arg)\r\n    }\r\n    return from(arg, encodingOrOffset, length)\r\n  }\r\n\r\n  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\r\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\r\n      Memory[Symbol.species] === Memory) {\r\n    Object.defineProperty(Memory, Symbol.species, {\r\n      value: null,\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: false\r\n    })\r\n  }\r\n\r\n  Memory.poolSize = 8192 // not used by this implementation\r\n\r\n  function from (value, encodingOrOffset, length) {\r\n    if (typeof value === 'number') {\r\n      throw new TypeError('\"value\" argument must not be a number')\r\n    }\r\n\r\n    if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\r\n      return fromArrayBuffer(value, encodingOrOffset, length)\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return fromString(value, encodingOrOffset)\r\n    }\r\n\r\n    return fromObject(value)\r\n  }\r\n\r\n  /**\r\n   * Functionally equivalent to Memory(arg, encoding) but throws a TypeError\r\n   * if value is a number.\r\n   * Memory.from(str[, encoding])\r\n   * Memory.from(array)\r\n   * Memory.from(buffer)\r\n   * Memory.from(arrayBuffer[, byteOffset[, length]])\r\n   **/\r\n  Memory.from = function (value, encodingOrOffset, length) {\r\n    return from(value, encodingOrOffset, length)\r\n  }\r\n\r\n  // Note: Change prototype *after* Memory.from is defined to workaround Chrome bug:\r\n  // https://github.com/feross/buffer/pull/148\r\n  Memory.prototype.__proto__ = Uint8Array.prototype\r\n  Memory.__proto__ = Uint8Array\r\n\r\n  function assertSize (size) {\r\n    if (typeof size !== 'number') {\r\n      throw new TypeError('\"size\" argument must be of type number')\r\n    } else if (size < 0) {\r\n      throw new RangeError('\"size\" argument must not be negative')\r\n    }\r\n  }\r\n\r\n  function alloc (size, fill, encoding) {\r\n    assertSize(size)\r\n    if (size <= 0) {\r\n      return reserveMemory(size)\r\n    }\r\n    if (fill !== undefined) {\r\n      // Only pay attention to encoding if it's a string. This\r\n      // prevents accidentally sending in a number that would\r\n      // be interpretted as a start offset.\r\n      return typeof encoding === 'string'\r\n        ? reserveMemory(size).fill(fill, encoding)\r\n        : reserveMemory(size).fill(fill)\r\n    }\r\n    return reserveMemory(size)\r\n  }\r\n\r\n  /**\r\n   * Creates a new filled Memory instance.\r\n   * alloc(size[, fill[, encoding]])\r\n   **/\r\n  Memory.alloc = function (size, fill, encoding) {\r\n    return alloc(size, fill, encoding)\r\n  }\r\n\r\n  function allocUnsafe (size) {\r\n    assertSize(size)\r\n    return reserveMemory(size < 0 ? 0 : checked(size) | 0)\r\n  }\r\n\r\n  /**\r\n   * Equivalent to Memory(num), by default creates a non-zero-filled Memory instance.\r\n   * */\r\n  Memory.allocUnsafe = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n  /**\r\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Memory instance.\r\n   */\r\n  Memory.allocUnsafeSlow = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n\r\n  function fromString (string, encoding) {\r\n    if (typeof encoding !== 'string' || encoding === '') {\r\n      encoding = 'utf8'\r\n    }\r\n\r\n    if (!Memory.isEncoding(encoding)) {\r\n      throw new TypeError('Unknown encoding: ' + encoding)\r\n    }\r\n\r\n    var length = byteLength(string, encoding) | 0\r\n    var buf = reserveMemory(length)\r\n\r\n    var actual = buf.write(string, encoding)\r\n\r\n    if (actual !== length) {\r\n      // Writing a hex string, for example, that contains invalid characters will\r\n      // cause everything after the first invalid character to be ignored. (e.g.\r\n      // 'abxxcd' will be treated as 'ab')\r\n      buf = buf.slice(0, actual)\r\n    }\r\n\r\n    return buf\r\n  }\r\n\r\n  function fromArrayLike (array) {\r\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\r\n    var buf = reserveMemory(length)\r\n    for (var i = 0; i < length; i += 1) {\r\n      buf[i] = array[i] & 255\r\n    }\r\n    return buf\r\n  }\r\n\r\n  function fromArrayBuffer (array, byteOffset, length) {\r\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\r\n      throw new RangeError('\"offset\" is outside of buffer bounds')\r\n    }\r\n\r\n    if (array.byteLength < byteOffset + (length || 0)) {\r\n      throw new RangeError('\"length\" is outside of buffer bounds')\r\n    }\r\n\r\n    var buf\r\n    if (byteOffset === undefined && length === undefined) {\r\n      buf = new Uint8Array(array)\r\n    } else if (length === undefined) {\r\n      buf = new Uint8Array(array, byteOffset)\r\n    } else {\r\n      buf = new Uint8Array(array, byteOffset, length)\r\n    }\r\n\r\n    // Return an augmented `Uint8Array` instance\r\n    buf.__proto__ = Memory.prototype\r\n    return buf\r\n  }\r\n\r\n  function fromObject (obj) {\r\n    if (Memory.isBuffer(obj)) {\r\n      var len = checked(obj.length) | 0\r\n      var buf = reserveMemory(len)\r\n\r\n      if (buf.length === 0) {\r\n        return buf\r\n      }\r\n\r\n      obj.copy(buf, 0, 0, len)\r\n      return buf\r\n    }\r\n\r\n    if (obj) {\r\n      if (ArrayBuffer.isView(obj) || 'length' in obj) {\r\n        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\r\n          return reserveMemory(0)\r\n        }\r\n        return fromArrayLike(obj)\r\n      }\r\n\r\n      if (obj.type === 'Memory' && Array.isArray(obj.data)) {\r\n        return fromArrayLike(obj.data)\r\n      }\r\n    }\r\n\r\n    throw new TypeError('The first argument must be one of type string, Memory, ArrayBuffer, Array, or Array-like Object.')\r\n  }\r\n\r\n  function checked (length) {\r\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\r\n    // length is NaN (which is otherwise coerced to zero.)\r\n    if (length >= K_MAX_LENGTH) {\r\n      throw new RangeError('Attempt to allocate Memory larger than maximum ' +\r\n                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\r\n    }\r\n    return length | 0\r\n  }\r\n\r\n  function SlowBuffer (length) {\r\n    if (+length != length) { // eslint-disable-line eqeqeq\r\n      length = 0\r\n    }\r\n    return Memory.alloc(+length)\r\n  }\r\n\r\n  Memory.isMemory = Memory.isBuffer = function isMemory (b) {\r\n    return b != null && b._isMemory === true  &&\r\n    b !== Memory.prototype // so Memory.isMemory(Memory.prototype) will be false\r\n  }\r\n\r\n  Memory.compare = function compare (a, b) {\r\n    if (!Memory.isMemory(a) || !Memory.isMemory(b)) {\r\n      throw new TypeError('Arguments must be Buffers')\r\n    }\r\n\r\n    if (a === b) return 0\r\n\r\n    var x = a.length\r\n    var y = b.length\r\n\r\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\r\n      if (a[i] !== b[i]) {\r\n        x = a[i]\r\n        y = b[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  Memory.isEncoding = function isEncoding (encoding) {\r\n    switch (String(encoding).toLowerCase()) {\r\n      case 'hex':\r\n      case 'utf8':\r\n      case 'utf-8':\r\n      case 'ascii':\r\n      case 'latin1':\r\n      case 'binary':\r\n      case 'base64':\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return true\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n\r\n  Memory.concat = function concat (list, length) {\r\n    if (!Array.isArray(list)) {\r\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n    }\r\n\r\n    if (list.length === 0) {\r\n      return Memory.alloc(0)\r\n    }\r\n\r\n    var i\r\n    if (length === undefined) {\r\n      length = 0\r\n      for (i = 0; i < list.length; ++i) {\r\n        length += list[i].length\r\n      }\r\n    }\r\n\r\n    var buffer = Memory.allocUnsafe(length)\r\n    var pos = 0\r\n    for (i = 0; i < list.length; ++i) {\r\n      var buf = list[i]\r\n      if (ArrayBuffer.isView(buf)) {\r\n        buf = Memory.from(buf)\r\n      }\r\n      if (!Memory.isMemory(buf)) {\r\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n      }\r\n      buf.copy(buffer, pos)\r\n      pos += buf.length\r\n    }\r\n    return buffer\r\n  }\r\n\r\n  function byteLength (string, encoding) {\r\n    if (Memory.isMemory(string)) {\r\n      return string.length\r\n    }\r\n    if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\r\n      return string.byteLength\r\n    }\r\n    if (typeof string !== 'string') {\r\n      string = '' + string\r\n    }\r\n\r\n    var len = string.length\r\n    if (len === 0) return 0\r\n\r\n    // Use a for loop to avoid recursion\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'ascii':\r\n        case 'latin1':\r\n        case 'binary':\r\n          return len\r\n        case 'utf8':\r\n        case 'utf-8':\r\n        case undefined:\r\n          return utf8ToBytes(string).length\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return len * 2\r\n        case 'hex':\r\n          return len >>> 1\r\n        case 'base64':\r\n          return base64ToBytes(string).length\r\n        default:\r\n          if (loweredCase) return utf8ToBytes(string).length // assume utf8\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n  Memory.byteLength = byteLength\r\n\r\n\r\n  /**\r\n   * Create arraybuffer from memory\r\n   *\r\n   * @method toArrayBuffer\r\n   * @param {Buffer} buffer\r\n   * @return {Arraybuffer} data\r\n   */\r\n  Memory.toArrayBuffer = function(memory) {\r\n    var array = new ArrayBuffer(memory.length);\r\n    var view = new Uint8Array(array);\r\n\r\n    for(var i = 0; i < memory.length; i++){\r\n      view[i] = memory[i];\r\n    }\r\n\r\n    return array;\r\n\r\n    //Faster but the results is failing the \"instanceof ArrayBuffer\" test\r\n    //return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n  }\r\n\r\n  function slowToString (encoding, start, end) {\r\n    var loweredCase = false\r\n\r\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\r\n    // property of a typed array.\r\n\r\n    // This behaves neither like String nor Uint8Array in that we set start/end\r\n    // to their upper/lower bounds if the value passed is out of range.\r\n    // undefined is handled specially as per ECMA-262 6th Edition,\r\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\r\n    if (start === undefined || start < 0) {\r\n      start = 0\r\n    }\r\n    // Return early if start > this.length. Done here to prevent potential uint32\r\n    // coercion fail below.\r\n    if (start > this.length) {\r\n      return ''\r\n    }\r\n\r\n    if (end === undefined || end > this.length) {\r\n      end = this.length\r\n    }\r\n\r\n    if (end <= 0) {\r\n      return ''\r\n    }\r\n\r\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\r\n    end >>>= 0\r\n    start >>>= 0\r\n\r\n    if (end <= start) {\r\n      return ''\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    while (true) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexSlice(this, start, end)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Slice(this, start, end)\r\n\r\n        case 'ascii':\r\n          return asciiSlice(this, start, end)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Slice(this, start, end)\r\n\r\n        case 'base64':\r\n          return base64Slice(this, start, end)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return utf16leSlice(this, start, end)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = (encoding + '').toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  // This property is used by `Memory.isMemory` \r\n  // to detect a Memory instance. \r\n  Memory.prototype._isMemory = true\r\n\r\n  function swap (b, n, m) {\r\n    var i = b[n]\r\n    b[n] = b[m]\r\n    b[m] = i\r\n  }\r\n\r\n  Memory.prototype.swap16 = function swap16 () {\r\n    var len = this.length\r\n    if (len % 2 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 16-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 2) {\r\n      swap(this, i, i + 1)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.swap32 = function swap32 () {\r\n    var len = this.length\r\n    if (len % 4 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 32-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3)\r\n      swap(this, i + 1, i + 2)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.swap64 = function swap64 () {\r\n    var len = this.length\r\n    if (len % 8 !== 0) {\r\n      throw new RangeError('Memory size must be a multiple of 64-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7)\r\n      swap(this, i + 1, i + 6)\r\n      swap(this, i + 2, i + 5)\r\n      swap(this, i + 3, i + 4)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Memory.prototype.toString = function toString () {\r\n    var length = this.length\r\n    if (length === 0) return ''\r\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\r\n    return slowToString.apply(this, arguments)\r\n  }\r\n\r\n  Memory.prototype.toLocaleString = Memory.prototype.toString\r\n\r\n  Memory.prototype.equals = function equals (b) {\r\n    if (!Memory.isMemory(b)) throw new TypeError('Argument must be a Memory')\r\n    if (this === b) return true\r\n    return Memory.compare(this, b) === 0\r\n  }\r\n\r\n  Memory.prototype.inspect = function inspect () {\r\n    var str = ''\r\n    var max = Memory.INSPECT_MAX_BYTES\r\n    if (this.length > 0) {\r\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\r\n      if (this.length > max) str += ' ... '\r\n    }\r\n    return '<Memory ' + str + '>'\r\n  }\r\n\r\n  Memory.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\r\n    if (!Memory.isMemory(target)) {\r\n      throw new TypeError('Argument must be a Memory')\r\n    }\r\n\r\n    if (start === undefined) {\r\n      start = 0\r\n    }\r\n    if (end === undefined) {\r\n      end = target ? target.length : 0\r\n    }\r\n    if (thisStart === undefined) {\r\n      thisStart = 0\r\n    }\r\n    if (thisEnd === undefined) {\r\n      thisEnd = this.length\r\n    }\r\n\r\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\r\n      throw new RangeError('out of range index')\r\n    }\r\n\r\n    if (thisStart >= thisEnd && start >= end) {\r\n      return 0\r\n    }\r\n    if (thisStart >= thisEnd) {\r\n      return -1\r\n    }\r\n    if (start >= end) {\r\n      return 1\r\n    }\r\n\r\n    start >>>= 0\r\n    end >>>= 0\r\n    thisStart >>>= 0\r\n    thisEnd >>>= 0\r\n\r\n    if (this === target) return 0\r\n\r\n    var x = thisEnd - thisStart\r\n    var y = end - start\r\n    var len = Math.min(x, y)\r\n\r\n    var thisCopy = this.slice(thisStart, thisEnd)\r\n    var targetCopy = target.slice(start, end)\r\n\r\n    for (var i = 0; i < len; ++i) {\r\n      if (thisCopy[i] !== targetCopy[i]) {\r\n        x = thisCopy[i]\r\n        y = targetCopy[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n  //\r\n  // Arguments:\r\n  // - buffer - a Memory to search\r\n  // - val - a string, Memory, or number\r\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\r\n  // - encoding - an optional encoding, relevant is val is a string\r\n  // - dir - true for indexOf, false for lastIndexOf\r\n  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\r\n    // Empty buffer means no match\r\n    if (buffer.length === 0) return -1\r\n\r\n    // Normalize byteOffset\r\n    if (typeof byteOffset === 'string') {\r\n      encoding = byteOffset\r\n      byteOffset = 0\r\n    } else if (byteOffset > 0x7fffffff) {\r\n      byteOffset = 0x7fffffff\r\n    } else if (byteOffset < -0x80000000) {\r\n      byteOffset = -0x80000000\r\n    }\r\n    byteOffset = +byteOffset  // Coerce to Number.\r\n    if (numberIsNaN(byteOffset)) {\r\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\r\n      byteOffset = dir ? 0 : (buffer.length - 1)\r\n    }\r\n\r\n    // Normalize byteOffset: negative offsets start from the end of the buffer\r\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\r\n    if (byteOffset >= buffer.length) {\r\n      if (dir) return -1\r\n      else byteOffset = buffer.length - 1\r\n    } else if (byteOffset < 0) {\r\n      if (dir) byteOffset = 0\r\n      else return -1\r\n    }\r\n\r\n    // Normalize val\r\n    if (typeof val === 'string') {\r\n      val = Memory.from(val, encoding)\r\n    }\r\n\r\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\r\n    if (Memory.isMemory(val)) {\r\n      // Special case: looking for empty string/buffer always fails\r\n      if (val.length === 0) {\r\n        return -1\r\n      }\r\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\r\n    } else if (typeof val === 'number') {\r\n      val = val & 0xFF // Search for a byte value [0-255]\r\n      if (typeof Uint8Array.prototype.indexOf === 'function') {\r\n        if (dir) {\r\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\r\n        } else {\r\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\r\n        }\r\n      }\r\n      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\r\n    }\r\n\r\n    throw new TypeError('val must be string, number or Memory')\r\n  }\r\n\r\n  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {\r\n    var indexSize = 1\r\n    var arrLength = arr.length\r\n    var valLength = val.length\r\n\r\n    if (encoding !== undefined) {\r\n      encoding = String(encoding).toLowerCase()\r\n      if (encoding === 'ucs2' || encoding === 'ucs-2' ||\r\n          encoding === 'utf16le' || encoding === 'utf-16le') {\r\n        if (arr.length < 2 || val.length < 2) {\r\n          return -1\r\n        }\r\n        indexSize = 2\r\n        arrLength /= 2\r\n        valLength /= 2\r\n        byteOffset /= 2\r\n      }\r\n    }\r\n\r\n    function read (buf, i) {\r\n      if (indexSize === 1) {\r\n        return buf[i]\r\n      } else {\r\n        return buf.readUInt16BE(i * indexSize)\r\n      }\r\n    }\r\n\r\n    var i\r\n    if (dir) {\r\n      var foundIndex = -1\r\n      for (i = byteOffset; i < arrLength; i++) {\r\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\r\n          if (foundIndex === -1) foundIndex = i\r\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\r\n        } else {\r\n          if (foundIndex !== -1) i -= i - foundIndex\r\n          foundIndex = -1\r\n        }\r\n      }\r\n    } else {\r\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\r\n      for (i = byteOffset; i >= 0; i--) {\r\n        var found = true\r\n        for (var j = 0; j < valLength; j++) {\r\n          if (read(arr, i + j) !== read(val, j)) {\r\n            found = false\r\n            break\r\n          }\r\n        }\r\n        if (found) return i\r\n      }\r\n    }\r\n\r\n    return -1\r\n  }\r\n\r\n  Memory.prototype.includes = function includes (val, byteOffset, encoding) {\r\n    return this.indexOf(val, byteOffset, encoding) !== -1\r\n  }\r\n\r\n  Memory.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\r\n  }\r\n\r\n  Memory.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\r\n  }\r\n\r\n  function hexWrite (buf, string, offset, length) {\r\n    offset = Number(offset) || 0\r\n    var remaining = buf.length - offset\r\n    if (!length) {\r\n      length = remaining\r\n    } else {\r\n      length = Number(length)\r\n      if (length > remaining) {\r\n        length = remaining\r\n      }\r\n    }\r\n\r\n    var strLen = string.length\r\n\r\n    if (length > strLen / 2) {\r\n      length = strLen / 2\r\n    }\r\n    for (var i = 0; i < length; ++i) {\r\n      var parsed = parseInt(string.substr(i * 2, 2), 16)\r\n      if (numberIsNaN(parsed)) return i\r\n      buf[offset + i] = parsed\r\n    }\r\n    return i\r\n  }\r\n\r\n  function utf8Write (buf, string, offset, length) {\r\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  function asciiWrite (buf, string, offset, length) {\r\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function latin1Write (buf, string, offset, length) {\r\n    return asciiWrite(buf, string, offset, length)\r\n  }\r\n\r\n  function base64Write (buf, string, offset, length) {\r\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function ucs2Write (buf, string, offset, length) {\r\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  Memory.prototype.write = function write (string, offset, length, encoding) {\r\n    // Memory#write(string)\r\n    if (offset === undefined) {\r\n      encoding = 'utf8'\r\n      length = this.length\r\n      offset = 0\r\n    // Memory#write(string, encoding)\r\n    } else if (length === undefined && typeof offset === 'string') {\r\n      encoding = offset\r\n      length = this.length\r\n      offset = 0\r\n    // Memory#write(string, offset[, length][, encoding])\r\n    } else if (isFinite(offset)) {\r\n      offset = offset >>> 0\r\n      if (isFinite(length)) {\r\n        length = length >>> 0\r\n        if (encoding === undefined) encoding = 'utf8'\r\n      } else {\r\n        encoding = length\r\n        length = undefined\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        'Memory.write(string, encoding, offset[, length]) is no longer supported'\r\n      )\r\n    }\r\n\r\n    var remaining = this.length - offset\r\n    if (length === undefined || length > remaining) length = remaining\r\n\r\n    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\r\n      throw new RangeError('Attempt to write outside buffer bounds')\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexWrite(this, string, offset, length)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Write(this, string, offset, length)\r\n\r\n        case 'ascii':\r\n          return asciiWrite(this, string, offset, length)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Write(this, string, offset, length)\r\n\r\n        case 'base64':\r\n          // Warning: maxLength not taken into account in base64Write\r\n          return base64Write(this, string, offset, length)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return ucs2Write(this, string, offset, length)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  Memory.prototype.toJSON = function toJSON () {\r\n    return {\r\n      type: 'Memory',\r\n      data: Array.prototype.slice.call(this._arr || this, 0)\r\n    }\r\n  }\r\n\r\n  function base64Slice (buf, start, end) {\r\n    if (start === 0 && end === buf.length) {\r\n      return base64.fromByteArray(buf)\r\n    } else {\r\n      return base64.fromByteArray(buf.slice(start, end))\r\n    }\r\n  }\r\n\r\n  function utf8Slice (buf, start, end) {\r\n    end = Math.min(buf.length, end)\r\n    var res = []\r\n\r\n    var i = start\r\n    while (i < end) {\r\n      var firstByte = buf[i]\r\n      var codePoint = null\r\n      var bytesPerSequence = (firstByte > 0xEF) ? 4\r\n        : (firstByte > 0xDF) ? 3\r\n        : (firstByte > 0xBF) ? 2\r\n        : 1\r\n\r\n      if (i + bytesPerSequence <= end) {\r\n        var secondByte, thirdByte, fourthByte, tempCodePoint\r\n\r\n        switch (bytesPerSequence) {\r\n          case 1:\r\n            if (firstByte < 0x80) {\r\n              codePoint = firstByte\r\n            }\r\n            break\r\n          case 2:\r\n            secondByte = buf[i + 1]\r\n            if ((secondByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\r\n              if (tempCodePoint > 0x7F) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 3:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\r\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 4:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            fourthByte = buf[i + 3]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\r\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      if (codePoint === null) {\r\n        // we did not generate a valid codePoint so insert a\r\n        // replacement char (U+FFFD) and advance only 1 byte\r\n        codePoint = 0xFFFD\r\n        bytesPerSequence = 1\r\n      } else if (codePoint > 0xFFFF) {\r\n        // encode to utf16 (surrogate pair dance)\r\n        codePoint -= 0x10000\r\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800)\r\n        codePoint = 0xDC00 | codePoint & 0x3FF\r\n      }\r\n\r\n      res.push(codePoint)\r\n      i += bytesPerSequence\r\n    }\r\n\r\n    return decodeCodePointsArray(res)\r\n  }\r\n\r\n  // Based on http://stackoverflow.com/a/22747272/680742, the browser with\r\n  // the lowest limit is Chrome, with 0x10000 args.\r\n  // We go 1 magnitude less, for safety\r\n  var MAX_ARGUMENTS_LENGTH = 0x1000\r\n\r\n  function decodeCodePointsArray (codePoints) {\r\n    var len = codePoints.length\r\n    if (len <= MAX_ARGUMENTS_LENGTH) {\r\n      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\r\n    }\r\n\r\n    // Decode in chunks to avoid \"call stack size exceeded\".\r\n    var res = ''\r\n    var i = 0\r\n    while (i < len) {\r\n      res += String.fromCharCode.apply(\r\n        String,\r\n        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n      )\r\n    }\r\n    return res\r\n  }\r\n\r\n  function asciiSlice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i] & 0x7F)\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function latin1Slice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i])\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function hexSlice (buf, start, end) {\r\n    var len = buf.length\r\n\r\n    if (!start || start < 0) start = 0\r\n    if (!end || end < 0 || end > len) end = len\r\n\r\n    var out = ''\r\n    for (var i = start; i < end; ++i) {\r\n      out += toHex(buf[i])\r\n    }\r\n    return out\r\n  }\r\n\r\n  function utf16leSlice (buf, start, end) {\r\n    var bytes = buf.slice(start, end)\r\n    var res = ''\r\n    for (var i = 0; i < bytes.length; i += 2) {\r\n      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\r\n    }\r\n    return res\r\n  }\r\n\r\n  Memory.prototype.slice = function slice (start, end) {\r\n    var len = this.length\r\n    start = ~~start\r\n    end = end === undefined ? len : ~~end\r\n\r\n    if (start < 0) {\r\n      start += len\r\n      if (start < 0) start = 0\r\n    } else if (start > len) {\r\n      start = len\r\n    }\r\n\r\n    if (end < 0) {\r\n      end += len\r\n      if (end < 0) end = 0\r\n    } else if (end > len) {\r\n      end = len\r\n    }\r\n\r\n    if (end < start) end = start\r\n\r\n    var newBuf = this.subarray(start, end)\r\n    // Return an augmented `Uint8Array` instance\r\n    newBuf.__proto__ = Memory.prototype\r\n    return newBuf\r\n  }\r\n\r\n  /*\r\n   * Need to make sure that buffer isn't trying to write out of bounds.\r\n   */\r\n  function checkOffset (offset, ext, length) {\r\n    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\r\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\r\n  }\r\n\r\n  Memory.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      checkOffset(offset, byteLength, this.length)\r\n    }\r\n\r\n    var val = this[offset + --byteLength]\r\n    var mul = 1\r\n    while (byteLength > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --byteLength] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    return this[offset]\r\n  }\r\n\r\n  Memory.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return this[offset] | (this[offset + 1] << 8)\r\n  }\r\n\r\n  Memory.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return (this[offset] << 8) | this[offset + 1]\r\n  }\r\n\r\n  Memory.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return ((this[offset]) |\r\n        (this[offset + 1] << 8) |\r\n        (this[offset + 2] << 16)) +\r\n        (this[offset + 3] * 0x1000000)\r\n  }\r\n\r\n  Memory.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] * 0x1000000) +\r\n      ((this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      this[offset + 3])\r\n  }\r\n\r\n  Memory.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var i = byteLength\r\n    var mul = 1\r\n    var val = this[offset + --i]\r\n    while (i > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Memory.prototype.readInt8 = function readInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    if (!(this[offset] & 0x80)) return (this[offset])\r\n    return ((0xff - this[offset] + 1) * -1)\r\n  }\r\n\r\n  Memory.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset] | (this[offset + 1] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Memory.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset + 1] | (this[offset] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Memory.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset]) |\r\n      (this[offset + 1] << 8) |\r\n      (this[offset + 2] << 16) |\r\n      (this[offset + 3] << 24)\r\n  }\r\n\r\n  Memory.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] << 24) |\r\n      (this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      (this[offset + 3])\r\n  }\r\n\r\n  Memory.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, true, 23, 4)\r\n  }\r\n\r\n  Memory.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, false, 23, 4)\r\n  }\r\n\r\n  Memory.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, true, 52, 8)\r\n  }\r\n\r\n  Memory.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, false, 52, 8)\r\n  }\r\n\r\n  function checkInt (buf, value, offset, ext, max, min) {\r\n    if (!Memory.isMemory(buf)) throw new TypeError('\"buffer\" argument must be a Memory instance')\r\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  Memory.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var mul = 1\r\n    var i = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Memory.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset + 3] = (value >>> 24)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = 0\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Memory.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\r\n    if (value < 0) value = 0xff + value + 1\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Memory.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Memory.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 3] = (value >>> 24)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    if (value < 0) value = 0xffffffff + value + 1\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  function checkIEEE754 (buf, value, offset, ext, max, min) {\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n    if (offset < 0) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  function writeFloat (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 23, 4)\r\n    return offset + 4\r\n  }\r\n\r\n  Memory.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Memory.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  function writeDouble (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 52, 8)\r\n    return offset + 8\r\n  }\r\n\r\n  Memory.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Memory.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\r\n  Memory.prototype.copy = function copy (target, targetStart, start, end) {\r\n    if (!Memory.isMemory(target)) throw new TypeError('argument should be a Memory')\r\n    if (!start) start = 0\r\n    if (!end && end !== 0) end = this.length\r\n    if (targetStart >= target.length) targetStart = target.length\r\n    if (!targetStart) targetStart = 0\r\n    if (end > 0 && end < start) end = start\r\n\r\n    // Copy 0 bytes; we're done\r\n    if (end === start) return 0\r\n    if (target.length === 0 || this.length === 0) return 0\r\n\r\n    // Fatal error conditions\r\n    if (targetStart < 0) {\r\n      throw new RangeError('targetStart out of bounds')\r\n    }\r\n    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\r\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\r\n\r\n    // Are we oob?\r\n    if (end > this.length) end = this.length\r\n    if (target.length - targetStart < end - start) {\r\n      end = target.length - targetStart + start\r\n    }\r\n\r\n    var len = end - start\r\n\r\n    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\r\n      // Use built-in when available, missing from IE11\r\n      this.copyWithin(targetStart, start, end)\r\n    } else if (this === target && start < targetStart && targetStart < end) {\r\n      // descending copy from end\r\n      for (var i = len - 1; i >= 0; --i) {\r\n        target[i + targetStart] = this[i + start]\r\n      }\r\n    } else {\r\n      Uint8Array.prototype.set.call(\r\n        target,\r\n        this.subarray(start, end),\r\n        targetStart\r\n      )\r\n    }\r\n\r\n    return len\r\n  }\r\n\r\n  // Usage:\r\n  //    buffer.fill(number[, offset[, end]])\r\n  //    buffer.fill(buffer[, offset[, end]])\r\n  //    buffer.fill(string[, offset[, end]][, encoding])\r\n  Memory.prototype.fill = function fill (val, start, end, encoding) {\r\n    // Handle string cases:\r\n    if (typeof val === 'string') {\r\n      if (typeof start === 'string') {\r\n        encoding = start\r\n        start = 0\r\n        end = this.length\r\n      } else if (typeof end === 'string') {\r\n        encoding = end\r\n        end = this.length\r\n      }\r\n      if (encoding !== undefined && typeof encoding !== 'string') {\r\n        throw new TypeError('encoding must be a string')\r\n      }\r\n      if (typeof encoding === 'string' && !Memory.isEncoding(encoding)) {\r\n        throw new TypeError('Unknown encoding: ' + encoding)\r\n      }\r\n      if (val.length === 1) {\r\n        var code = val.charCodeAt(0)\r\n        if ((encoding === 'utf8' && code < 128) ||\r\n            encoding === 'latin1') {\r\n          // Fast path: If `val` fits into a single byte, use that numeric value.\r\n          val = code\r\n        }\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      val = val & 255\r\n    }\r\n\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (start < 0 || this.length < start || this.length < end) {\r\n      throw new RangeError('Out of range index')\r\n    }\r\n\r\n    if (end <= start) {\r\n      return this\r\n    }\r\n\r\n    start = start >>> 0\r\n    end = end === undefined ? this.length : end >>> 0\r\n\r\n    if (!val) val = 0\r\n\r\n    var i\r\n    if (typeof val === 'number') {\r\n      for (i = start; i < end; ++i) {\r\n        this[i] = val\r\n      }\r\n    } else {\r\n      var bytes = Memory.isMemory(val)\r\n        ? val\r\n        : new Memory(val, encoding)\r\n      var len = bytes.length\r\n      if (len === 0) {\r\n        throw new TypeError('The value \"' + val +\r\n          '\" is invalid for argument \"value\"')\r\n      }\r\n      for (i = 0; i < end - start; ++i) {\r\n        this[i + start] = bytes[i % len]\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  // HELPER FUNCTIONS\r\n  // ================\r\n\r\n  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\r\n\r\n  function base64clean (str) {\r\n    // Node takes equal signs as end of the Base64 encoding\r\n    str = str.split('=')[0]\r\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\r\n    str = str.trim().replace(INVALID_BASE64_RE, '')\r\n    // Node converts strings with length < 2 to ''\r\n    if (str.length < 2) return ''\r\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\r\n    while (str.length % 4 !== 0) {\r\n      str = str + '='\r\n    }\r\n    return str\r\n  }\r\n\r\n  function toHex (n) {\r\n    if (n < 16) return '0' + n.toString(16)\r\n    return n.toString(16)\r\n  }\r\n\r\n  function utf8ToBytes (string, units) {\r\n    units = units || Infinity\r\n    var codePoint\r\n    var length = string.length\r\n    var leadSurrogate = null\r\n    var bytes = []\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      codePoint = string.charCodeAt(i)\r\n\r\n      // is surrogate component\r\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\r\n        // last char was a lead\r\n        if (!leadSurrogate) {\r\n          // no lead yet\r\n          if (codePoint > 0xDBFF) {\r\n            // unexpected trail\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          } else if (i + 1 === length) {\r\n            // unpaired lead\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          }\r\n\r\n          // valid lead\r\n          leadSurrogate = codePoint\r\n\r\n          continue\r\n        }\r\n\r\n        // 2 leads in a row\r\n        if (codePoint < 0xDC00) {\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n          leadSurrogate = codePoint\r\n          continue\r\n        }\r\n\r\n        // valid surrogate pair\r\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\r\n      } else if (leadSurrogate) {\r\n        // valid bmp char, but last char was a lead\r\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n      }\r\n\r\n      leadSurrogate = null\r\n\r\n      // encode utf8\r\n      if (codePoint < 0x80) {\r\n        if ((units -= 1) < 0) break\r\n        bytes.push(codePoint)\r\n      } else if (codePoint < 0x800) {\r\n        if ((units -= 2) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x6 | 0xC0,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x10000) {\r\n        if ((units -= 3) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0xC | 0xE0,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x110000) {\r\n        if ((units -= 4) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x12 | 0xF0,\r\n          codePoint >> 0xC & 0x3F | 0x80,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else {\r\n        throw new Error('Invalid code point')\r\n      }\r\n    }\r\n\r\n    return bytes\r\n  }\r\n\r\n  function asciiToBytes (str) {\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      // Node's code seems to be doing this and not & 0x7F..\r\n      byteArray.push(str.charCodeAt(i) & 0xFF)\r\n    }\r\n    return byteArray\r\n  }\r\n\r\n  function utf16leToBytes (str, units) {\r\n    var c, hi, lo\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      if ((units -= 2) < 0) break\r\n\r\n      c = str.charCodeAt(i)\r\n      hi = c >> 8\r\n      lo = c % 256\r\n      byteArray.push(lo)\r\n      byteArray.push(hi)\r\n    }\r\n\r\n    return byteArray\r\n  }\r\n\r\n  function base64ToBytes (str) {\r\n    return base64.toByteArray(base64clean(str))\r\n  }\r\n\r\n  function blitBuffer (src, dst, offset, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      if ((i + offset >= dst.length) || (i >= src.length)) break\r\n      dst[i + offset] = src[i]\r\n    }\r\n    return i\r\n  }\r\n\r\n  // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\r\n  // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\r\n  function isArrayBuffer (obj) {\r\n    return obj instanceof ArrayBuffer ||\r\n      (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\r\n        typeof obj.byteLength === 'number')\r\n  }\r\n\r\n  function numberIsNaN (obj) {\r\n    return obj !== obj // eslint-disable-line no-self-compare\r\n  }\r\n\r\n  return binary.Memory = Memory;\r\n\r\n});"]}