{"version":3,"sources":["skylark-langx-binary.js"],"names":["define","skylark","attach","fromBase64","str","a","b","c","d","encoding","length","arraybuffer","ArrayBuffer","view","Uint8Array","i","j","indexOf","charAt","fromBinaryString","charCodeAt","fromBuffer","buffer","array","readInt8","data","offset","readUint16","readUint32","exports","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","fromByteArray","uint8","extraBytes","parts","len2","push","encodeChunk","lookup","join","Array","code","Error","start","end","num","output","read","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","s","NaN","Infinity","Math","pow","write","value","rt","abs","isNaN","floor","log","LN2","binary","base64","ieee754","Buffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","__proto__","prototype","arg","encodingOrOffset","allocUnsafe","from","TypeError","isArrayBuffer","byteOffset","undefined","fromArrayBuffer","string","isEncoding","actual","slice","fromString","obj","isBuffer","checked","copy","isView","numberIsNaN","fromArrayLike","type","isArray","fromObject","assertSize","size","toString","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","error","Object","defineProperty","get","this","Symbol","species","configurable","enumerable","writable","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","max","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","INVALID_BASE64_RE","leadSurrogate","split","trim","replace","base64clean","src","dst","constructor","name","main"],"mappings":"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","file":"../skylark-langx-binary.js","sourcesContent":["define('skylark-langx-binary/binary',[\r\n  \"skylark-langx-ns\",\r\n],function(skylark){\r\n\t\"use strict\";\r\n\r\n\r\n\t/**\r\n\t * Create arraybuffer from binary string\r\n\t *\r\n\t * @method fromBinaryString\r\n\t * @param {String} str\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBinaryString(str) {\r\n\t\tvar length = str.length;\r\n\t\tvar arraybuffer = new ArrayBuffer(length);\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\r\n\t\tfor(var i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn arraybuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * Create arraybuffer from base64 string\r\n\t *\r\n\t * @method fromBase64\r\n\t * @param {String} base64\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBase64(str){\r\n\t\tvar encoding = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\t\tvar length = str.length / 4 * 3;\r\n\t\tvar arraybuffer = new ArrayBuffer(length);\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\r\n\t\tvar a, b, c, d;\r\n\r\n\t\tfor(var i = 0, j = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\ta = encoding.indexOf(str.charAt(j++));\r\n\t\t\tb = encoding.indexOf(str.charAt(j++));\r\n\t\t\tc = encoding.indexOf(str.charAt(j++));\r\n\t\t\td = encoding.indexOf(str.charAt(j++));\r\n\r\n\t\t\tview[i] = (a << 2) | (b >> 4);\r\n\t\t\tif(c !== 64)\r\n\t\t\t{\r\n\t\t\t\tview[i+1] = ((b & 15) << 4) | (c >> 2);\r\n\t\t\t}\r\n\t\t\tif(d !== 64)\r\n\t\t\t{\r\n\t\t\t\tview[i+2] = ((c & 3) << 6) | d;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn arraybuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * Create arraybuffer from Nodejs buffer\r\n\t *\r\n\t * @method fromBuffer\r\n\t * @param {Buffer} buffer\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBuffer(buffer)\t{\r\n\t\tvar array = new ArrayBuffer(buffer.length);\r\n\t\tvar view = new Uint8Array(array);\r\n\r\n\t\tfor(var i = 0; i < buffer.length; i++)\r\n\t\t{\r\n\t\t\tview[i] = buffer[i];\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t\t//Faster but the results is failing the \"instanceof ArrayBuffer\" test\r\n\t\t//return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n\t}\r\n\r\n    function readInt8(data, offset) {\r\n        return data[offset] << 24 >> 24;\r\n    }\r\n    function readUint16(data, offset) {\r\n        return data[offset] << 8 | data[offset + 1];\r\n    }\r\n    function readUint32(data, offset) {\r\n        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\r\n    }\r\n\r\n\r\n\treturn skylark.attach(\"langx.binary\",{\r\n\t\tfromBase64,\r\n\t\tfromBinaryString,\r\n\t\tfromBuffer,\r\n\t\treadInt8,\r\n\t\treadUint16,\r\n\t\treadUint32\r\n\t});\r\n});\ndefine('skylark-langx-binary/base64',[],function(){\r\n  'use strict'\r\n  var exports = {};\r\n\r\n  exports.byteLength = byteLength\r\n  exports.toByteArray = toByteArray\r\n  exports.fromByteArray = fromByteArray\r\n\r\n  var lookup = []\r\n  var revLookup = []\r\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n  for (var i = 0, len = code.length; i < len; ++i) {\r\n    lookup[i] = code[i]\r\n    revLookup[code.charCodeAt(i)] = i\r\n  }\r\n\r\n  // Support decoding URL-safe base64 strings, as Node.js does.\r\n  // See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\n  revLookup['-'.charCodeAt(0)] = 62\r\n  revLookup['_'.charCodeAt(0)] = 63\r\n\r\n  function getLens (b64) {\r\n    var len = b64.length\r\n\r\n    if (len % 4 > 0) {\r\n      throw new Error('Invalid string. Length must be a multiple of 4')\r\n    }\r\n\r\n    // Trim off extra bytes after placeholder bytes are found\r\n    // See: https://github.com/beatgammit/base64-js/issues/42\r\n    var validLen = b64.indexOf('=')\r\n    if (validLen === -1) validLen = len\r\n\r\n    var placeHoldersLen = validLen === len\r\n      ? 0\r\n      : 4 - (validLen % 4)\r\n\r\n    return [validLen, placeHoldersLen]\r\n  }\r\n\r\n  // base64 is 4/3 + up to two characters of the original data\r\n  function byteLength (b64) {\r\n    var lens = getLens(b64)\r\n    var validLen = lens[0]\r\n    var placeHoldersLen = lens[1]\r\n    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n  }\r\n\r\n  function _byteLength (b64, validLen, placeHoldersLen) {\r\n    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n  }\r\n\r\n  function toByteArray (b64) {\r\n    var tmp\r\n    var lens = getLens(b64)\r\n    var validLen = lens[0]\r\n    var placeHoldersLen = lens[1]\r\n\r\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n    var curByte = 0\r\n\r\n    // if there are placeholders, only get up to the last complete 4 chars\r\n    var len = placeHoldersLen > 0\r\n      ? validLen - 4\r\n      : validLen\r\n\r\n    var i\r\n    for (i = 0; i < len; i += 4) {\r\n      tmp =\r\n        (revLookup[b64.charCodeAt(i)] << 18) |\r\n        (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n        (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n        revLookup[b64.charCodeAt(i + 3)]\r\n      arr[curByte++] = (tmp >> 16) & 0xFF\r\n      arr[curByte++] = (tmp >> 8) & 0xFF\r\n      arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    if (placeHoldersLen === 2) {\r\n      tmp =\r\n        (revLookup[b64.charCodeAt(i)] << 2) |\r\n        (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n      arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    if (placeHoldersLen === 1) {\r\n      tmp =\r\n        (revLookup[b64.charCodeAt(i)] << 10) |\r\n        (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n        (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n      arr[curByte++] = (tmp >> 8) & 0xFF\r\n      arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    return arr\r\n  }\r\n\r\n  function tripletToBase64 (num) {\r\n    return lookup[num >> 18 & 0x3F] +\r\n      lookup[num >> 12 & 0x3F] +\r\n      lookup[num >> 6 & 0x3F] +\r\n      lookup[num & 0x3F]\r\n  }\r\n\r\n  function encodeChunk (uint8, start, end) {\r\n    var tmp\r\n    var output = []\r\n    for (var i = start; i < end; i += 3) {\r\n      tmp =\r\n        ((uint8[i] << 16) & 0xFF0000) +\r\n        ((uint8[i + 1] << 8) & 0xFF00) +\r\n        (uint8[i + 2] & 0xFF)\r\n      output.push(tripletToBase64(tmp))\r\n    }\r\n    return output.join('')\r\n  }\r\n\r\n  function fromByteArray (uint8) {\r\n    var tmp\r\n    var len = uint8.length\r\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n    var parts = []\r\n    var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n    // go through the array every three bytes, we'll deal with trailing stuff later\r\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n      parts.push(encodeChunk(\r\n        uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\r\n      ))\r\n    }\r\n\r\n    // pad the end with zeros, but make sure to not forget the extra bytes\r\n    if (extraBytes === 1) {\r\n      tmp = uint8[len - 1]\r\n      parts.push(\r\n        lookup[tmp >> 2] +\r\n        lookup[(tmp << 4) & 0x3F] +\r\n        '=='\r\n      )\r\n    } else if (extraBytes === 2) {\r\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n      parts.push(\r\n        lookup[tmp >> 10] +\r\n        lookup[(tmp >> 4) & 0x3F] +\r\n        lookup[(tmp << 2) & 0x3F] +\r\n        '='\r\n      )\r\n    }\r\n\r\n    return parts.join('')\r\n  }\r\n\r\n  return exports;\r\n});\ndefine('skylark-langx-binary/ieee754',[],function(){\r\n  'use strict'\r\n  var exports = {};\r\n\r\n  exports.read = function (buffer, offset, isLE, mLen, nBytes) {\r\n    var e, m\r\n    var eLen = (nBytes * 8) - mLen - 1\r\n    var eMax = (1 << eLen) - 1\r\n    var eBias = eMax >> 1\r\n    var nBits = -7\r\n    var i = isLE ? (nBytes - 1) : 0\r\n    var d = isLE ? -1 : 1\r\n    var s = buffer[offset + i]\r\n\r\n    i += d\r\n\r\n    e = s & ((1 << (-nBits)) - 1)\r\n    s >>= (-nBits)\r\n    nBits += eLen\r\n    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n    m = e & ((1 << (-nBits)) - 1)\r\n    e >>= (-nBits)\r\n    nBits += mLen\r\n    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n    if (e === 0) {\r\n      e = 1 - eBias\r\n    } else if (e === eMax) {\r\n      return m ? NaN : ((s ? -1 : 1) * Infinity)\r\n    } else {\r\n      m = m + Math.pow(2, mLen)\r\n      e = e - eBias\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\r\n  }\r\n\r\n  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\r\n    var e, m, c\r\n    var eLen = (nBytes * 8) - mLen - 1\r\n    var eMax = (1 << eLen) - 1\r\n    var eBias = eMax >> 1\r\n    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\r\n    var i = isLE ? 0 : (nBytes - 1)\r\n    var d = isLE ? 1 : -1\r\n    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\r\n\r\n    value = Math.abs(value)\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n      m = isNaN(value) ? 1 : 0\r\n      e = eMax\r\n    } else {\r\n      e = Math.floor(Math.log(value) / Math.LN2)\r\n      if (value * (c = Math.pow(2, -e)) < 1) {\r\n        e--\r\n        c *= 2\r\n      }\r\n      if (e + eBias >= 1) {\r\n        value += rt / c\r\n      } else {\r\n        value += rt * Math.pow(2, 1 - eBias)\r\n      }\r\n      if (value * c >= 2) {\r\n        e++\r\n        c /= 2\r\n      }\r\n\r\n      if (e + eBias >= eMax) {\r\n        m = 0\r\n        e = eMax\r\n      } else if (e + eBias >= 1) {\r\n        m = ((value * c) - 1) * Math.pow(2, mLen)\r\n        e = e + eBias\r\n      } else {\r\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\r\n        e = 0\r\n      }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\r\n\r\n    e = (e << mLen) | m\r\n    eLen += mLen\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\r\n\r\n    buffer[offset + i - d] |= s * 128\r\n  }\r\n\r\n  return exports;\r\n});\r\n\ndefine('skylark-langx-binary/buffer',[\r\n  \"./binary\",\r\n  \"./base64\",\r\n  \"./ieee754\"\r\n],function(binary,base64,ieee754){\r\n  /*!\r\n   * The buffer module from node.js, for the browser.\r\n   *\r\n   * @author   Feross Aboukhadijeh <https://feross.org>\r\n   * @license  MIT\r\n   */\r\n  /* eslint-disable no-proto */\r\n\r\n  'use strict'\r\n\r\n\r\n  Buffer.INSPECT_MAX_BYTES = 50\r\n\r\n  var K_MAX_LENGTH = 0x7fffffff\r\n  Buffer.kMaxLength = K_MAX_LENGTH\r\n\r\n  /**\r\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\r\n   *   === true    Use Uint8Array implementation (fastest)\r\n   *   === false   Print warning and recommend using `buffer` v4.x which has an Object\r\n   *               implementation (most compatible, even IE6)\r\n   *\r\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n   * Opera 11.6+, iOS 4.2+.\r\n   *\r\n   * We report that the browser does not support typed arrays if the are not subclassable\r\n   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\r\n   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\r\n   * for __proto__ and has a buggy typed array implementation.\r\n   */\r\n  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\r\n\r\n  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\r\n      typeof console.error === 'function') {\r\n    console.error(\r\n      'This browser lacks typed array (Uint8Array) support which is required by ' +\r\n      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\r\n    )\r\n  }\r\n\r\n  function typedArraySupport () {\r\n    // Can typed array instances can be augmented?\r\n    try {\r\n      var arr = new Uint8Array(1)\r\n      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\r\n      return arr.foo() === 42\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(Buffer.prototype, 'parent', {\r\n    get: function () {\r\n      if (!(this instanceof Buffer)) {\r\n        return undefined\r\n      }\r\n      return this.buffer\r\n    }\r\n  })\r\n\r\n  Object.defineProperty(Buffer.prototype, 'offset', {\r\n    get: function () {\r\n      if (!(this instanceof Buffer)) {\r\n        return undefined\r\n      }\r\n      return this.byteOffset\r\n    }\r\n  })\r\n\r\n  function createBuffer (length) {\r\n    if (length > K_MAX_LENGTH) {\r\n      throw new RangeError('Invalid typed array length')\r\n    }\r\n    // Return an augmented `Uint8Array` instance\r\n    var buf = new Uint8Array(length)\r\n    buf.__proto__ = Buffer.prototype\r\n    return buf\r\n  }\r\n\r\n  /**\r\n   * The Buffer constructor returns instances of `Uint8Array` that have their\r\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\r\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\r\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n   * returns a single octet.\r\n   *\r\n   * The `Uint8Array` prototype remains unmodified.\r\n   */\r\n\r\n  function Buffer (arg, encodingOrOffset, length) {\r\n    // Common case.\r\n    if (typeof arg === 'number') {\r\n      if (typeof encodingOrOffset === 'string') {\r\n        throw new Error(\r\n          'If encoding is specified then the first argument must be a string'\r\n        )\r\n      }\r\n      return allocUnsafe(arg)\r\n    }\r\n    return from(arg, encodingOrOffset, length)\r\n  }\r\n\r\n  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\r\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\r\n      Buffer[Symbol.species] === Buffer) {\r\n    Object.defineProperty(Buffer, Symbol.species, {\r\n      value: null,\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: false\r\n    })\r\n  }\r\n\r\n  Buffer.poolSize = 8192 // not used by this implementation\r\n\r\n  function from (value, encodingOrOffset, length) {\r\n    if (typeof value === 'number') {\r\n      throw new TypeError('\"value\" argument must not be a number')\r\n    }\r\n\r\n    if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\r\n      return fromArrayBuffer(value, encodingOrOffset, length)\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return fromString(value, encodingOrOffset)\r\n    }\r\n\r\n    return fromObject(value)\r\n  }\r\n\r\n  /**\r\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n   * if value is a number.\r\n   * Buffer.from(str[, encoding])\r\n   * Buffer.from(array)\r\n   * Buffer.from(buffer)\r\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n   **/\r\n  Buffer.from = function (value, encodingOrOffset, length) {\r\n    return from(value, encodingOrOffset, length)\r\n  }\r\n\r\n  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\r\n  // https://github.com/feross/buffer/pull/148\r\n  Buffer.prototype.__proto__ = Uint8Array.prototype\r\n  Buffer.__proto__ = Uint8Array\r\n\r\n  function assertSize (size) {\r\n    if (typeof size !== 'number') {\r\n      throw new TypeError('\"size\" argument must be of type number')\r\n    } else if (size < 0) {\r\n      throw new RangeError('\"size\" argument must not be negative')\r\n    }\r\n  }\r\n\r\n  function alloc (size, fill, encoding) {\r\n    assertSize(size)\r\n    if (size <= 0) {\r\n      return createBuffer(size)\r\n    }\r\n    if (fill !== undefined) {\r\n      // Only pay attention to encoding if it's a string. This\r\n      // prevents accidentally sending in a number that would\r\n      // be interpretted as a start offset.\r\n      return typeof encoding === 'string'\r\n        ? createBuffer(size).fill(fill, encoding)\r\n        : createBuffer(size).fill(fill)\r\n    }\r\n    return createBuffer(size)\r\n  }\r\n\r\n  /**\r\n   * Creates a new filled Buffer instance.\r\n   * alloc(size[, fill[, encoding]])\r\n   **/\r\n  Buffer.alloc = function (size, fill, encoding) {\r\n    return alloc(size, fill, encoding)\r\n  }\r\n\r\n  function allocUnsafe (size) {\r\n    assertSize(size)\r\n    return createBuffer(size < 0 ? 0 : checked(size) | 0)\r\n  }\r\n\r\n  /**\r\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\r\n   * */\r\n  Buffer.allocUnsafe = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n  /**\r\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\r\n   */\r\n  Buffer.allocUnsafeSlow = function (size) {\r\n    return allocUnsafe(size)\r\n  }\r\n\r\n  function fromString (string, encoding) {\r\n    if (typeof encoding !== 'string' || encoding === '') {\r\n      encoding = 'utf8'\r\n    }\r\n\r\n    if (!Buffer.isEncoding(encoding)) {\r\n      throw new TypeError('Unknown encoding: ' + encoding)\r\n    }\r\n\r\n    var length = byteLength(string, encoding) | 0\r\n    var buf = createBuffer(length)\r\n\r\n    var actual = buf.write(string, encoding)\r\n\r\n    if (actual !== length) {\r\n      // Writing a hex string, for example, that contains invalid characters will\r\n      // cause everything after the first invalid character to be ignored. (e.g.\r\n      // 'abxxcd' will be treated as 'ab')\r\n      buf = buf.slice(0, actual)\r\n    }\r\n\r\n    return buf\r\n  }\r\n\r\n  function fromArrayLike (array) {\r\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\r\n    var buf = createBuffer(length)\r\n    for (var i = 0; i < length; i += 1) {\r\n      buf[i] = array[i] & 255\r\n    }\r\n    return buf\r\n  }\r\n\r\n  function fromArrayBuffer (array, byteOffset, length) {\r\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\r\n      throw new RangeError('\"offset\" is outside of buffer bounds')\r\n    }\r\n\r\n    if (array.byteLength < byteOffset + (length || 0)) {\r\n      throw new RangeError('\"length\" is outside of buffer bounds')\r\n    }\r\n\r\n    var buf\r\n    if (byteOffset === undefined && length === undefined) {\r\n      buf = new Uint8Array(array)\r\n    } else if (length === undefined) {\r\n      buf = new Uint8Array(array, byteOffset)\r\n    } else {\r\n      buf = new Uint8Array(array, byteOffset, length)\r\n    }\r\n\r\n    // Return an augmented `Uint8Array` instance\r\n    buf.__proto__ = Buffer.prototype\r\n    return buf\r\n  }\r\n\r\n  function fromObject (obj) {\r\n    if (Buffer.isBuffer(obj)) {\r\n      var len = checked(obj.length) | 0\r\n      var buf = createBuffer(len)\r\n\r\n      if (buf.length === 0) {\r\n        return buf\r\n      }\r\n\r\n      obj.copy(buf, 0, 0, len)\r\n      return buf\r\n    }\r\n\r\n    if (obj) {\r\n      if (ArrayBuffer.isView(obj) || 'length' in obj) {\r\n        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\r\n          return createBuffer(0)\r\n        }\r\n        return fromArrayLike(obj)\r\n      }\r\n\r\n      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\r\n        return fromArrayLike(obj.data)\r\n      }\r\n    }\r\n\r\n    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\r\n  }\r\n\r\n  function checked (length) {\r\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\r\n    // length is NaN (which is otherwise coerced to zero.)\r\n    if (length >= K_MAX_LENGTH) {\r\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\r\n                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\r\n    }\r\n    return length | 0\r\n  }\r\n\r\n  function SlowBuffer (length) {\r\n    if (+length != length) { // eslint-disable-line eqeqeq\r\n      length = 0\r\n    }\r\n    return Buffer.alloc(+length)\r\n  }\r\n\r\n  Buffer.isBuffer = function isBuffer (b) {\r\n    return b != null && b._isBuffer === true\r\n  }\r\n\r\n  Buffer.compare = function compare (a, b) {\r\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\r\n      throw new TypeError('Arguments must be Buffers')\r\n    }\r\n\r\n    if (a === b) return 0\r\n\r\n    var x = a.length\r\n    var y = b.length\r\n\r\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\r\n      if (a[i] !== b[i]) {\r\n        x = a[i]\r\n        y = b[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  Buffer.isEncoding = function isEncoding (encoding) {\r\n    switch (String(encoding).toLowerCase()) {\r\n      case 'hex':\r\n      case 'utf8':\r\n      case 'utf-8':\r\n      case 'ascii':\r\n      case 'latin1':\r\n      case 'binary':\r\n      case 'base64':\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return true\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n\r\n  Buffer.concat = function concat (list, length) {\r\n    if (!Array.isArray(list)) {\r\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n    }\r\n\r\n    if (list.length === 0) {\r\n      return Buffer.alloc(0)\r\n    }\r\n\r\n    var i\r\n    if (length === undefined) {\r\n      length = 0\r\n      for (i = 0; i < list.length; ++i) {\r\n        length += list[i].length\r\n      }\r\n    }\r\n\r\n    var buffer = Buffer.allocUnsafe(length)\r\n    var pos = 0\r\n    for (i = 0; i < list.length; ++i) {\r\n      var buf = list[i]\r\n      if (ArrayBuffer.isView(buf)) {\r\n        buf = Buffer.from(buf)\r\n      }\r\n      if (!Buffer.isBuffer(buf)) {\r\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n      }\r\n      buf.copy(buffer, pos)\r\n      pos += buf.length\r\n    }\r\n    return buffer\r\n  }\r\n\r\n  function byteLength (string, encoding) {\r\n    if (Buffer.isBuffer(string)) {\r\n      return string.length\r\n    }\r\n    if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\r\n      return string.byteLength\r\n    }\r\n    if (typeof string !== 'string') {\r\n      string = '' + string\r\n    }\r\n\r\n    var len = string.length\r\n    if (len === 0) return 0\r\n\r\n    // Use a for loop to avoid recursion\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'ascii':\r\n        case 'latin1':\r\n        case 'binary':\r\n          return len\r\n        case 'utf8':\r\n        case 'utf-8':\r\n        case undefined:\r\n          return utf8ToBytes(string).length\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return len * 2\r\n        case 'hex':\r\n          return len >>> 1\r\n        case 'base64':\r\n          return base64ToBytes(string).length\r\n        default:\r\n          if (loweredCase) return utf8ToBytes(string).length // assume utf8\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n  Buffer.byteLength = byteLength\r\n\r\n  function slowToString (encoding, start, end) {\r\n    var loweredCase = false\r\n\r\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\r\n    // property of a typed array.\r\n\r\n    // This behaves neither like String nor Uint8Array in that we set start/end\r\n    // to their upper/lower bounds if the value passed is out of range.\r\n    // undefined is handled specially as per ECMA-262 6th Edition,\r\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\r\n    if (start === undefined || start < 0) {\r\n      start = 0\r\n    }\r\n    // Return early if start > this.length. Done here to prevent potential uint32\r\n    // coercion fail below.\r\n    if (start > this.length) {\r\n      return ''\r\n    }\r\n\r\n    if (end === undefined || end > this.length) {\r\n      end = this.length\r\n    }\r\n\r\n    if (end <= 0) {\r\n      return ''\r\n    }\r\n\r\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\r\n    end >>>= 0\r\n    start >>>= 0\r\n\r\n    if (end <= start) {\r\n      return ''\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    while (true) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexSlice(this, start, end)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Slice(this, start, end)\r\n\r\n        case 'ascii':\r\n          return asciiSlice(this, start, end)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Slice(this, start, end)\r\n\r\n        case 'base64':\r\n          return base64Slice(this, start, end)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return utf16leSlice(this, start, end)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = (encoding + '').toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\r\n  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\r\n  // reliably in a browserify context because there could be multiple different\r\n  // copies of the 'buffer' package in use. This method works even for Buffer\r\n  // instances that were created from another copy of the `buffer` package.\r\n  // See: https://github.com/feross/buffer/issues/154\r\n  Buffer.prototype._isBuffer = true\r\n\r\n  function swap (b, n, m) {\r\n    var i = b[n]\r\n    b[n] = b[m]\r\n    b[m] = i\r\n  }\r\n\r\n  Buffer.prototype.swap16 = function swap16 () {\r\n    var len = this.length\r\n    if (len % 2 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 16-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 2) {\r\n      swap(this, i, i + 1)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Buffer.prototype.swap32 = function swap32 () {\r\n    var len = this.length\r\n    if (len % 4 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 32-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 4) {\r\n      swap(this, i, i + 3)\r\n      swap(this, i + 1, i + 2)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Buffer.prototype.swap64 = function swap64 () {\r\n    var len = this.length\r\n    if (len % 8 !== 0) {\r\n      throw new RangeError('Buffer size must be a multiple of 64-bits')\r\n    }\r\n    for (var i = 0; i < len; i += 8) {\r\n      swap(this, i, i + 7)\r\n      swap(this, i + 1, i + 6)\r\n      swap(this, i + 2, i + 5)\r\n      swap(this, i + 3, i + 4)\r\n    }\r\n    return this\r\n  }\r\n\r\n  Buffer.prototype.toString = function toString () {\r\n    var length = this.length\r\n    if (length === 0) return ''\r\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\r\n    return slowToString.apply(this, arguments)\r\n  }\r\n\r\n  Buffer.prototype.toLocaleString = Buffer.prototype.toString\r\n\r\n  Buffer.prototype.equals = function equals (b) {\r\n    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\r\n    if (this === b) return true\r\n    return Buffer.compare(this, b) === 0\r\n  }\r\n\r\n  Buffer.prototype.inspect = function inspect () {\r\n    var str = ''\r\n    var max = Buffer.INSPECT_MAX_BYTES\r\n    if (this.length > 0) {\r\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\r\n      if (this.length > max) str += ' ... '\r\n    }\r\n    return '<Buffer ' + str + '>'\r\n  }\r\n\r\n  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\r\n    if (!Buffer.isBuffer(target)) {\r\n      throw new TypeError('Argument must be a Buffer')\r\n    }\r\n\r\n    if (start === undefined) {\r\n      start = 0\r\n    }\r\n    if (end === undefined) {\r\n      end = target ? target.length : 0\r\n    }\r\n    if (thisStart === undefined) {\r\n      thisStart = 0\r\n    }\r\n    if (thisEnd === undefined) {\r\n      thisEnd = this.length\r\n    }\r\n\r\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\r\n      throw new RangeError('out of range index')\r\n    }\r\n\r\n    if (thisStart >= thisEnd && start >= end) {\r\n      return 0\r\n    }\r\n    if (thisStart >= thisEnd) {\r\n      return -1\r\n    }\r\n    if (start >= end) {\r\n      return 1\r\n    }\r\n\r\n    start >>>= 0\r\n    end >>>= 0\r\n    thisStart >>>= 0\r\n    thisEnd >>>= 0\r\n\r\n    if (this === target) return 0\r\n\r\n    var x = thisEnd - thisStart\r\n    var y = end - start\r\n    var len = Math.min(x, y)\r\n\r\n    var thisCopy = this.slice(thisStart, thisEnd)\r\n    var targetCopy = target.slice(start, end)\r\n\r\n    for (var i = 0; i < len; ++i) {\r\n      if (thisCopy[i] !== targetCopy[i]) {\r\n        x = thisCopy[i]\r\n        y = targetCopy[i]\r\n        break\r\n      }\r\n    }\r\n\r\n    if (x < y) return -1\r\n    if (y < x) return 1\r\n    return 0\r\n  }\r\n\r\n  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n  //\r\n  // Arguments:\r\n  // - buffer - a Buffer to search\r\n  // - val - a string, Buffer, or number\r\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\r\n  // - encoding - an optional encoding, relevant is val is a string\r\n  // - dir - true for indexOf, false for lastIndexOf\r\n  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\r\n    // Empty buffer means no match\r\n    if (buffer.length === 0) return -1\r\n\r\n    // Normalize byteOffset\r\n    if (typeof byteOffset === 'string') {\r\n      encoding = byteOffset\r\n      byteOffset = 0\r\n    } else if (byteOffset > 0x7fffffff) {\r\n      byteOffset = 0x7fffffff\r\n    } else if (byteOffset < -0x80000000) {\r\n      byteOffset = -0x80000000\r\n    }\r\n    byteOffset = +byteOffset  // Coerce to Number.\r\n    if (numberIsNaN(byteOffset)) {\r\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\r\n      byteOffset = dir ? 0 : (buffer.length - 1)\r\n    }\r\n\r\n    // Normalize byteOffset: negative offsets start from the end of the buffer\r\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\r\n    if (byteOffset >= buffer.length) {\r\n      if (dir) return -1\r\n      else byteOffset = buffer.length - 1\r\n    } else if (byteOffset < 0) {\r\n      if (dir) byteOffset = 0\r\n      else return -1\r\n    }\r\n\r\n    // Normalize val\r\n    if (typeof val === 'string') {\r\n      val = Buffer.from(val, encoding)\r\n    }\r\n\r\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\r\n    if (Buffer.isBuffer(val)) {\r\n      // Special case: looking for empty string/buffer always fails\r\n      if (val.length === 0) {\r\n        return -1\r\n      }\r\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\r\n    } else if (typeof val === 'number') {\r\n      val = val & 0xFF // Search for a byte value [0-255]\r\n      if (typeof Uint8Array.prototype.indexOf === 'function') {\r\n        if (dir) {\r\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\r\n        } else {\r\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\r\n        }\r\n      }\r\n      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\r\n    }\r\n\r\n    throw new TypeError('val must be string, number or Buffer')\r\n  }\r\n\r\n  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {\r\n    var indexSize = 1\r\n    var arrLength = arr.length\r\n    var valLength = val.length\r\n\r\n    if (encoding !== undefined) {\r\n      encoding = String(encoding).toLowerCase()\r\n      if (encoding === 'ucs2' || encoding === 'ucs-2' ||\r\n          encoding === 'utf16le' || encoding === 'utf-16le') {\r\n        if (arr.length < 2 || val.length < 2) {\r\n          return -1\r\n        }\r\n        indexSize = 2\r\n        arrLength /= 2\r\n        valLength /= 2\r\n        byteOffset /= 2\r\n      }\r\n    }\r\n\r\n    function read (buf, i) {\r\n      if (indexSize === 1) {\r\n        return buf[i]\r\n      } else {\r\n        return buf.readUInt16BE(i * indexSize)\r\n      }\r\n    }\r\n\r\n    var i\r\n    if (dir) {\r\n      var foundIndex = -1\r\n      for (i = byteOffset; i < arrLength; i++) {\r\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\r\n          if (foundIndex === -1) foundIndex = i\r\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\r\n        } else {\r\n          if (foundIndex !== -1) i -= i - foundIndex\r\n          foundIndex = -1\r\n        }\r\n      }\r\n    } else {\r\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\r\n      for (i = byteOffset; i >= 0; i--) {\r\n        var found = true\r\n        for (var j = 0; j < valLength; j++) {\r\n          if (read(arr, i + j) !== read(val, j)) {\r\n            found = false\r\n            break\r\n          }\r\n        }\r\n        if (found) return i\r\n      }\r\n    }\r\n\r\n    return -1\r\n  }\r\n\r\n  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {\r\n    return this.indexOf(val, byteOffset, encoding) !== -1\r\n  }\r\n\r\n  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\r\n  }\r\n\r\n  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\r\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\r\n  }\r\n\r\n  function hexWrite (buf, string, offset, length) {\r\n    offset = Number(offset) || 0\r\n    var remaining = buf.length - offset\r\n    if (!length) {\r\n      length = remaining\r\n    } else {\r\n      length = Number(length)\r\n      if (length > remaining) {\r\n        length = remaining\r\n      }\r\n    }\r\n\r\n    var strLen = string.length\r\n\r\n    if (length > strLen / 2) {\r\n      length = strLen / 2\r\n    }\r\n    for (var i = 0; i < length; ++i) {\r\n      var parsed = parseInt(string.substr(i * 2, 2), 16)\r\n      if (numberIsNaN(parsed)) return i\r\n      buf[offset + i] = parsed\r\n    }\r\n    return i\r\n  }\r\n\r\n  function utf8Write (buf, string, offset, length) {\r\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  function asciiWrite (buf, string, offset, length) {\r\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function latin1Write (buf, string, offset, length) {\r\n    return asciiWrite(buf, string, offset, length)\r\n  }\r\n\r\n  function base64Write (buf, string, offset, length) {\r\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\r\n  }\r\n\r\n  function ucs2Write (buf, string, offset, length) {\r\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\r\n  }\r\n\r\n  Buffer.prototype.write = function write (string, offset, length, encoding) {\r\n    // Buffer#write(string)\r\n    if (offset === undefined) {\r\n      encoding = 'utf8'\r\n      length = this.length\r\n      offset = 0\r\n    // Buffer#write(string, encoding)\r\n    } else if (length === undefined && typeof offset === 'string') {\r\n      encoding = offset\r\n      length = this.length\r\n      offset = 0\r\n    // Buffer#write(string, offset[, length][, encoding])\r\n    } else if (isFinite(offset)) {\r\n      offset = offset >>> 0\r\n      if (isFinite(length)) {\r\n        length = length >>> 0\r\n        if (encoding === undefined) encoding = 'utf8'\r\n      } else {\r\n        encoding = length\r\n        length = undefined\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        'Buffer.write(string, encoding, offset[, length]) is no longer supported'\r\n      )\r\n    }\r\n\r\n    var remaining = this.length - offset\r\n    if (length === undefined || length > remaining) length = remaining\r\n\r\n    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\r\n      throw new RangeError('Attempt to write outside buffer bounds')\r\n    }\r\n\r\n    if (!encoding) encoding = 'utf8'\r\n\r\n    var loweredCase = false\r\n    for (;;) {\r\n      switch (encoding) {\r\n        case 'hex':\r\n          return hexWrite(this, string, offset, length)\r\n\r\n        case 'utf8':\r\n        case 'utf-8':\r\n          return utf8Write(this, string, offset, length)\r\n\r\n        case 'ascii':\r\n          return asciiWrite(this, string, offset, length)\r\n\r\n        case 'latin1':\r\n        case 'binary':\r\n          return latin1Write(this, string, offset, length)\r\n\r\n        case 'base64':\r\n          // Warning: maxLength not taken into account in base64Write\r\n          return base64Write(this, string, offset, length)\r\n\r\n        case 'ucs2':\r\n        case 'ucs-2':\r\n        case 'utf16le':\r\n        case 'utf-16le':\r\n          return ucs2Write(this, string, offset, length)\r\n\r\n        default:\r\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n          encoding = ('' + encoding).toLowerCase()\r\n          loweredCase = true\r\n      }\r\n    }\r\n  }\r\n\r\n  Buffer.prototype.toJSON = function toJSON () {\r\n    return {\r\n      type: 'Buffer',\r\n      data: Array.prototype.slice.call(this._arr || this, 0)\r\n    }\r\n  }\r\n\r\n  function base64Slice (buf, start, end) {\r\n    if (start === 0 && end === buf.length) {\r\n      return base64.fromByteArray(buf)\r\n    } else {\r\n      return base64.fromByteArray(buf.slice(start, end))\r\n    }\r\n  }\r\n\r\n  function utf8Slice (buf, start, end) {\r\n    end = Math.min(buf.length, end)\r\n    var res = []\r\n\r\n    var i = start\r\n    while (i < end) {\r\n      var firstByte = buf[i]\r\n      var codePoint = null\r\n      var bytesPerSequence = (firstByte > 0xEF) ? 4\r\n        : (firstByte > 0xDF) ? 3\r\n        : (firstByte > 0xBF) ? 2\r\n        : 1\r\n\r\n      if (i + bytesPerSequence <= end) {\r\n        var secondByte, thirdByte, fourthByte, tempCodePoint\r\n\r\n        switch (bytesPerSequence) {\r\n          case 1:\r\n            if (firstByte < 0x80) {\r\n              codePoint = firstByte\r\n            }\r\n            break\r\n          case 2:\r\n            secondByte = buf[i + 1]\r\n            if ((secondByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\r\n              if (tempCodePoint > 0x7F) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 3:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\r\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n            break\r\n          case 4:\r\n            secondByte = buf[i + 1]\r\n            thirdByte = buf[i + 2]\r\n            fourthByte = buf[i + 3]\r\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\r\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                codePoint = tempCodePoint\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      if (codePoint === null) {\r\n        // we did not generate a valid codePoint so insert a\r\n        // replacement char (U+FFFD) and advance only 1 byte\r\n        codePoint = 0xFFFD\r\n        bytesPerSequence = 1\r\n      } else if (codePoint > 0xFFFF) {\r\n        // encode to utf16 (surrogate pair dance)\r\n        codePoint -= 0x10000\r\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800)\r\n        codePoint = 0xDC00 | codePoint & 0x3FF\r\n      }\r\n\r\n      res.push(codePoint)\r\n      i += bytesPerSequence\r\n    }\r\n\r\n    return decodeCodePointsArray(res)\r\n  }\r\n\r\n  // Based on http://stackoverflow.com/a/22747272/680742, the browser with\r\n  // the lowest limit is Chrome, with 0x10000 args.\r\n  // We go 1 magnitude less, for safety\r\n  var MAX_ARGUMENTS_LENGTH = 0x1000\r\n\r\n  function decodeCodePointsArray (codePoints) {\r\n    var len = codePoints.length\r\n    if (len <= MAX_ARGUMENTS_LENGTH) {\r\n      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\r\n    }\r\n\r\n    // Decode in chunks to avoid \"call stack size exceeded\".\r\n    var res = ''\r\n    var i = 0\r\n    while (i < len) {\r\n      res += String.fromCharCode.apply(\r\n        String,\r\n        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n      )\r\n    }\r\n    return res\r\n  }\r\n\r\n  function asciiSlice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i] & 0x7F)\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function latin1Slice (buf, start, end) {\r\n    var ret = ''\r\n    end = Math.min(buf.length, end)\r\n\r\n    for (var i = start; i < end; ++i) {\r\n      ret += String.fromCharCode(buf[i])\r\n    }\r\n    return ret\r\n  }\r\n\r\n  function hexSlice (buf, start, end) {\r\n    var len = buf.length\r\n\r\n    if (!start || start < 0) start = 0\r\n    if (!end || end < 0 || end > len) end = len\r\n\r\n    var out = ''\r\n    for (var i = start; i < end; ++i) {\r\n      out += toHex(buf[i])\r\n    }\r\n    return out\r\n  }\r\n\r\n  function utf16leSlice (buf, start, end) {\r\n    var bytes = buf.slice(start, end)\r\n    var res = ''\r\n    for (var i = 0; i < bytes.length; i += 2) {\r\n      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\r\n    }\r\n    return res\r\n  }\r\n\r\n  Buffer.prototype.slice = function slice (start, end) {\r\n    var len = this.length\r\n    start = ~~start\r\n    end = end === undefined ? len : ~~end\r\n\r\n    if (start < 0) {\r\n      start += len\r\n      if (start < 0) start = 0\r\n    } else if (start > len) {\r\n      start = len\r\n    }\r\n\r\n    if (end < 0) {\r\n      end += len\r\n      if (end < 0) end = 0\r\n    } else if (end > len) {\r\n      end = len\r\n    }\r\n\r\n    if (end < start) end = start\r\n\r\n    var newBuf = this.subarray(start, end)\r\n    // Return an augmented `Uint8Array` instance\r\n    newBuf.__proto__ = Buffer.prototype\r\n    return newBuf\r\n  }\r\n\r\n  /*\r\n   * Need to make sure that buffer isn't trying to write out of bounds.\r\n   */\r\n  function checkOffset (offset, ext, length) {\r\n    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\r\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\r\n  }\r\n\r\n  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      checkOffset(offset, byteLength, this.length)\r\n    }\r\n\r\n    var val = this[offset + --byteLength]\r\n    var mul = 1\r\n    while (byteLength > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --byteLength] * mul\r\n    }\r\n\r\n    return val\r\n  }\r\n\r\n  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    return this[offset]\r\n  }\r\n\r\n  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return this[offset] | (this[offset + 1] << 8)\r\n  }\r\n\r\n  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    return (this[offset] << 8) | this[offset + 1]\r\n  }\r\n\r\n  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return ((this[offset]) |\r\n        (this[offset + 1] << 8) |\r\n        (this[offset + 2] << 16)) +\r\n        (this[offset + 3] * 0x1000000)\r\n  }\r\n\r\n  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] * 0x1000000) +\r\n      ((this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      this[offset + 3])\r\n  }\r\n\r\n  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var val = this[offset]\r\n    var mul = 1\r\n    var i = 0\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      val += this[offset + i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n    var i = byteLength\r\n    var mul = 1\r\n    var val = this[offset + --i]\r\n    while (i > 0 && (mul *= 0x100)) {\r\n      val += this[offset + --i] * mul\r\n    }\r\n    mul *= 0x80\r\n\r\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n    return val\r\n  }\r\n\r\n  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 1, this.length)\r\n    if (!(this[offset] & 0x80)) return (this[offset])\r\n    return ((0xff - this[offset] + 1) * -1)\r\n  }\r\n\r\n  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset] | (this[offset + 1] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 2, this.length)\r\n    var val = this[offset + 1] | (this[offset] << 8)\r\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n  }\r\n\r\n  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset]) |\r\n      (this[offset + 1] << 8) |\r\n      (this[offset + 2] << 16) |\r\n      (this[offset + 3] << 24)\r\n  }\r\n\r\n  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n    return (this[offset] << 24) |\r\n      (this[offset + 1] << 16) |\r\n      (this[offset + 2] << 8) |\r\n      (this[offset + 3])\r\n  }\r\n\r\n  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, true, 23, 4)\r\n  }\r\n\r\n  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 4, this.length)\r\n    return ieee754.read(this, offset, false, 23, 4)\r\n  }\r\n\r\n  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, true, 52, 8)\r\n  }\r\n\r\n  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkOffset(offset, 8, this.length)\r\n    return ieee754.read(this, offset, false, 52, 8)\r\n  }\r\n\r\n  function checkInt (buf, value, offset, ext, max, min) {\r\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\r\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var mul = 1\r\n    var i = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    byteLength = byteLength >>> 0\r\n    if (!noAssert) {\r\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n      checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      this[offset + i] = (value / mul) & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset + 3] = (value >>> 24)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = 0\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset] = value & 0xFF\r\n    while (++i < byteLength && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n      checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n    }\r\n\r\n    var i = byteLength - 1\r\n    var mul = 1\r\n    var sub = 0\r\n    this[offset + i] = value & 0xFF\r\n    while (--i >= 0 && (mul *= 0x100)) {\r\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\r\n        sub = 1\r\n      }\r\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n    }\r\n\r\n    return offset + byteLength\r\n  }\r\n\r\n  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\r\n    if (value < 0) value = 0xff + value + 1\r\n    this[offset] = (value & 0xff)\r\n    return offset + 1\r\n  }\r\n\r\n  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    return offset + 2\r\n  }\r\n\r\n  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n    this[offset] = (value >>> 8)\r\n    this[offset + 1] = (value & 0xff)\r\n    return offset + 2\r\n  }\r\n\r\n  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    this[offset] = (value & 0xff)\r\n    this[offset + 1] = (value >>> 8)\r\n    this[offset + 2] = (value >>> 16)\r\n    this[offset + 3] = (value >>> 24)\r\n    return offset + 4\r\n  }\r\n\r\n  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n    if (value < 0) value = 0xffffffff + value + 1\r\n    this[offset] = (value >>> 24)\r\n    this[offset + 1] = (value >>> 16)\r\n    this[offset + 2] = (value >>> 8)\r\n    this[offset + 3] = (value & 0xff)\r\n    return offset + 4\r\n  }\r\n\r\n  function checkIEEE754 (buf, value, offset, ext, max, min) {\r\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n    if (offset < 0) throw new RangeError('Index out of range')\r\n  }\r\n\r\n  function writeFloat (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 23, 4)\r\n    return offset + 4\r\n  }\r\n\r\n  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\r\n    return writeFloat(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  function writeDouble (buf, value, offset, littleEndian, noAssert) {\r\n    value = +value\r\n    offset = offset >>> 0\r\n    if (!noAssert) {\r\n      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\r\n    }\r\n    ieee754.write(buf, value, offset, littleEndian, 52, 8)\r\n    return offset + 8\r\n  }\r\n\r\n  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, true, noAssert)\r\n  }\r\n\r\n  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\r\n    return writeDouble(this, value, offset, false, noAssert)\r\n  }\r\n\r\n  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\r\n  Buffer.prototype.copy = function copy (target, targetStart, start, end) {\r\n    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\r\n    if (!start) start = 0\r\n    if (!end && end !== 0) end = this.length\r\n    if (targetStart >= target.length) targetStart = target.length\r\n    if (!targetStart) targetStart = 0\r\n    if (end > 0 && end < start) end = start\r\n\r\n    // Copy 0 bytes; we're done\r\n    if (end === start) return 0\r\n    if (target.length === 0 || this.length === 0) return 0\r\n\r\n    // Fatal error conditions\r\n    if (targetStart < 0) {\r\n      throw new RangeError('targetStart out of bounds')\r\n    }\r\n    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\r\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\r\n\r\n    // Are we oob?\r\n    if (end > this.length) end = this.length\r\n    if (target.length - targetStart < end - start) {\r\n      end = target.length - targetStart + start\r\n    }\r\n\r\n    var len = end - start\r\n\r\n    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\r\n      // Use built-in when available, missing from IE11\r\n      this.copyWithin(targetStart, start, end)\r\n    } else if (this === target && start < targetStart && targetStart < end) {\r\n      // descending copy from end\r\n      for (var i = len - 1; i >= 0; --i) {\r\n        target[i + targetStart] = this[i + start]\r\n      }\r\n    } else {\r\n      Uint8Array.prototype.set.call(\r\n        target,\r\n        this.subarray(start, end),\r\n        targetStart\r\n      )\r\n    }\r\n\r\n    return len\r\n  }\r\n\r\n  // Usage:\r\n  //    buffer.fill(number[, offset[, end]])\r\n  //    buffer.fill(buffer[, offset[, end]])\r\n  //    buffer.fill(string[, offset[, end]][, encoding])\r\n  Buffer.prototype.fill = function fill (val, start, end, encoding) {\r\n    // Handle string cases:\r\n    if (typeof val === 'string') {\r\n      if (typeof start === 'string') {\r\n        encoding = start\r\n        start = 0\r\n        end = this.length\r\n      } else if (typeof end === 'string') {\r\n        encoding = end\r\n        end = this.length\r\n      }\r\n      if (encoding !== undefined && typeof encoding !== 'string') {\r\n        throw new TypeError('encoding must be a string')\r\n      }\r\n      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\r\n        throw new TypeError('Unknown encoding: ' + encoding)\r\n      }\r\n      if (val.length === 1) {\r\n        var code = val.charCodeAt(0)\r\n        if ((encoding === 'utf8' && code < 128) ||\r\n            encoding === 'latin1') {\r\n          // Fast path: If `val` fits into a single byte, use that numeric value.\r\n          val = code\r\n        }\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      val = val & 255\r\n    }\r\n\r\n    // Invalid ranges are not set to a default, so can range check early.\r\n    if (start < 0 || this.length < start || this.length < end) {\r\n      throw new RangeError('Out of range index')\r\n    }\r\n\r\n    if (end <= start) {\r\n      return this\r\n    }\r\n\r\n    start = start >>> 0\r\n    end = end === undefined ? this.length : end >>> 0\r\n\r\n    if (!val) val = 0\r\n\r\n    var i\r\n    if (typeof val === 'number') {\r\n      for (i = start; i < end; ++i) {\r\n        this[i] = val\r\n      }\r\n    } else {\r\n      var bytes = Buffer.isBuffer(val)\r\n        ? val\r\n        : new Buffer(val, encoding)\r\n      var len = bytes.length\r\n      if (len === 0) {\r\n        throw new TypeError('The value \"' + val +\r\n          '\" is invalid for argument \"value\"')\r\n      }\r\n      for (i = 0; i < end - start; ++i) {\r\n        this[i + start] = bytes[i % len]\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  // HELPER FUNCTIONS\r\n  // ================\r\n\r\n  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\r\n\r\n  function base64clean (str) {\r\n    // Node takes equal signs as end of the Base64 encoding\r\n    str = str.split('=')[0]\r\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\r\n    str = str.trim().replace(INVALID_BASE64_RE, '')\r\n    // Node converts strings with length < 2 to ''\r\n    if (str.length < 2) return ''\r\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\r\n    while (str.length % 4 !== 0) {\r\n      str = str + '='\r\n    }\r\n    return str\r\n  }\r\n\r\n  function toHex (n) {\r\n    if (n < 16) return '0' + n.toString(16)\r\n    return n.toString(16)\r\n  }\r\n\r\n  function utf8ToBytes (string, units) {\r\n    units = units || Infinity\r\n    var codePoint\r\n    var length = string.length\r\n    var leadSurrogate = null\r\n    var bytes = []\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      codePoint = string.charCodeAt(i)\r\n\r\n      // is surrogate component\r\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\r\n        // last char was a lead\r\n        if (!leadSurrogate) {\r\n          // no lead yet\r\n          if (codePoint > 0xDBFF) {\r\n            // unexpected trail\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          } else if (i + 1 === length) {\r\n            // unpaired lead\r\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n            continue\r\n          }\r\n\r\n          // valid lead\r\n          leadSurrogate = codePoint\r\n\r\n          continue\r\n        }\r\n\r\n        // 2 leads in a row\r\n        if (codePoint < 0xDC00) {\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n          leadSurrogate = codePoint\r\n          continue\r\n        }\r\n\r\n        // valid surrogate pair\r\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\r\n      } else if (leadSurrogate) {\r\n        // valid bmp char, but last char was a lead\r\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n      }\r\n\r\n      leadSurrogate = null\r\n\r\n      // encode utf8\r\n      if (codePoint < 0x80) {\r\n        if ((units -= 1) < 0) break\r\n        bytes.push(codePoint)\r\n      } else if (codePoint < 0x800) {\r\n        if ((units -= 2) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x6 | 0xC0,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x10000) {\r\n        if ((units -= 3) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0xC | 0xE0,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else if (codePoint < 0x110000) {\r\n        if ((units -= 4) < 0) break\r\n        bytes.push(\r\n          codePoint >> 0x12 | 0xF0,\r\n          codePoint >> 0xC & 0x3F | 0x80,\r\n          codePoint >> 0x6 & 0x3F | 0x80,\r\n          codePoint & 0x3F | 0x80\r\n        )\r\n      } else {\r\n        throw new Error('Invalid code point')\r\n      }\r\n    }\r\n\r\n    return bytes\r\n  }\r\n\r\n  function asciiToBytes (str) {\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      // Node's code seems to be doing this and not & 0x7F..\r\n      byteArray.push(str.charCodeAt(i) & 0xFF)\r\n    }\r\n    return byteArray\r\n  }\r\n\r\n  function utf16leToBytes (str, units) {\r\n    var c, hi, lo\r\n    var byteArray = []\r\n    for (var i = 0; i < str.length; ++i) {\r\n      if ((units -= 2) < 0) break\r\n\r\n      c = str.charCodeAt(i)\r\n      hi = c >> 8\r\n      lo = c % 256\r\n      byteArray.push(lo)\r\n      byteArray.push(hi)\r\n    }\r\n\r\n    return byteArray\r\n  }\r\n\r\n  function base64ToBytes (str) {\r\n    return base64.toByteArray(base64clean(str))\r\n  }\r\n\r\n  function blitBuffer (src, dst, offset, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      if ((i + offset >= dst.length) || (i >= src.length)) break\r\n      dst[i + offset] = src[i]\r\n    }\r\n    return i\r\n  }\r\n\r\n  // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\r\n  // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\r\n  function isArrayBuffer (obj) {\r\n    return obj instanceof ArrayBuffer ||\r\n      (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\r\n        typeof obj.byteLength === 'number')\r\n  }\r\n\r\n  function numberIsNaN (obj) {\r\n    return obj !== obj // eslint-disable-line no-self-compare\r\n  }\r\n\r\n  return binary.Buffer = Buffer;\r\n\r\n});\ndefine('skylark-langx-binary/main',[\r\n\t\"./binary\",\r\n\t\"./buffer\"\r\n],function(binary){\r\n\treturn binary;\r\n});\ndefine('skylark-langx-binary', ['skylark-langx-binary/main'], function (main) { return main; });\n\n"]}